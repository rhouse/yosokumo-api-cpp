// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yosokumo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "yosokumo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* Catalog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Catalog_reflection_ = NULL;
const ::google::protobuf::Descriptor* Study_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Study_reflection_ = NULL;
const ::google::protobuf::Descriptor* Study_Owner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Study_Owner_reflection_ = NULL;
const ::google::protobuf::Descriptor* Study_Table_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Study_Table_reflection_ = NULL;
const ::google::protobuf::Descriptor* Study_Model_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Study_Model_reflection_ = NULL;
const ::google::protobuf::Descriptor* Study_Panel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Study_Panel_reflection_ = NULL;
const ::google::protobuf::Descriptor* Study_Roster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Study_Roster_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Study_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Study_Status_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Study_Visibility_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Roster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Roster_reflection_ = NULL;
const ::google::protobuf::Descriptor* Role_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Role_reflection_ = NULL;
const ::google::protobuf::Descriptor* Role_Roleholder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Role_Roleholder_reflection_ = NULL;
const ::google::protobuf::Descriptor* Role_Privileges_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Role_Privileges_reflection_ = NULL;
const ::google::protobuf::Descriptor* Role_Study_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Role_Study_reflection_ = NULL;
const ::google::protobuf::Descriptor* Panel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Panel_reflection_ = NULL;
const ::google::protobuf::Descriptor* Panel_StudyNameControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Panel_StudyNameControl_reflection_ = NULL;
const ::google::protobuf::Descriptor* Panel_TypeControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Panel_TypeControl_reflection_ = NULL;
const ::google::protobuf::Descriptor* Panel_StatusControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Panel_StatusControl_reflection_ = NULL;
const ::google::protobuf::Descriptor* Panel_VisibilityControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Panel_VisibilityControl_reflection_ = NULL;
const ::google::protobuf::Descriptor* Panel_BlockCountControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Panel_BlockCountControl_reflection_ = NULL;
const ::google::protobuf::Descriptor* Panel_CellCountControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Panel_CellCountControl_reflection_ = NULL;
const ::google::protobuf::Descriptor* Panel_ProspectCountControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Panel_ProspectCountControl_reflection_ = NULL;
const ::google::protobuf::Descriptor* Panel_CreationTimeControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Panel_CreationTimeControl_reflection_ = NULL;
const ::google::protobuf::Descriptor* Panel_LatestBlockTimeControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Panel_LatestBlockTimeControl_reflection_ = NULL;
const ::google::protobuf::Descriptor* Panel_LatestProspectTimeControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Panel_LatestProspectTimeControl_reflection_ = NULL;
const ::google::protobuf::Descriptor* Block_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Block_reflection_ = NULL;
const ::google::protobuf::Descriptor* Predictor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Predictor_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Predictor_Status_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Predictor_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Predictor_Level_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Specimen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Specimen_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Specimen_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Cell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cell_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_yosokumo_2eproto() {
  protobuf_AddDesc_yosokumo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "yosokumo.proto");
  GOOGLE_CHECK(file != NULL);
  Catalog_descriptor_ = file->message_type(0);
  static const int Catalog_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Catalog, user_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Catalog, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Catalog, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Catalog, study_),
  };
  Catalog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Catalog_descriptor_,
      Catalog::default_instance_,
      Catalog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Catalog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Catalog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Catalog));
  Study_descriptor_ = file->message_type(1);
  static const int Study_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Study, study_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Study, study_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Study, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Study, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Study, visibility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Study, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Study, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Study, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Study, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Study, panel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Study, roster_),
  };
  Study_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Study_descriptor_,
      Study::default_instance_,
      Study_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Study, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Study, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Study));
  Study_Owner_descriptor_ = Study_descriptor_->nested_type(0);
  static const int Study_Owner_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Study_Owner, user_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Study_Owner, user_name_),
  };
  Study_Owner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Study_Owner_descriptor_,
      Study_Owner::default_instance_,
      Study_Owner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Study_Owner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Study_Owner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Study_Owner));
  Study_Table_descriptor_ = Study_descriptor_->nested_type(1);
  static const int Study_Table_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Study_Table, location_),
  };
  Study_Table_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Study_Table_descriptor_,
      Study_Table::default_instance_,
      Study_Table_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Study_Table, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Study_Table, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Study_Table));
  Study_Model_descriptor_ = Study_descriptor_->nested_type(2);
  static const int Study_Model_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Study_Model, location_),
  };
  Study_Model_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Study_Model_descriptor_,
      Study_Model::default_instance_,
      Study_Model_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Study_Model, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Study_Model, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Study_Model));
  Study_Panel_descriptor_ = Study_descriptor_->nested_type(3);
  static const int Study_Panel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Study_Panel, location_),
  };
  Study_Panel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Study_Panel_descriptor_,
      Study_Panel::default_instance_,
      Study_Panel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Study_Panel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Study_Panel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Study_Panel));
  Study_Roster_descriptor_ = Study_descriptor_->nested_type(4);
  static const int Study_Roster_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Study_Roster, location_),
  };
  Study_Roster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Study_Roster_descriptor_,
      Study_Roster::default_instance_,
      Study_Roster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Study_Roster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Study_Roster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Study_Roster));
  Study_Type_descriptor_ = Study_descriptor_->enum_type(0);
  Study_Status_descriptor_ = Study_descriptor_->enum_type(1);
  Study_Visibility_descriptor_ = Study_descriptor_->enum_type(2);
  Roster_descriptor_ = file->message_type(2);
  static const int Roster_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roster, study_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roster, study_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roster, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roster, role_),
  };
  Roster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Roster_descriptor_,
      Roster::default_instance_,
      Roster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Roster));
  Role_descriptor_ = file->message_type(3);
  static const int Role_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, roleholder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, privileges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, study_),
  };
  Role_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Role_descriptor_,
      Role::default_instance_,
      Role_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Role));
  Role_Roleholder_descriptor_ = Role_descriptor_->nested_type(0);
  static const int Role_Roleholder_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role_Roleholder, user_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role_Roleholder, user_name_),
  };
  Role_Roleholder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Role_Roleholder_descriptor_,
      Role_Roleholder::default_instance_,
      Role_Roleholder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role_Roleholder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role_Roleholder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Role_Roleholder));
  Role_Privileges_descriptor_ = Role_descriptor_->nested_type(1);
  static const int Role_Privileges_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role_Privileges, get_study_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role_Privileges, delete_study_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role_Privileges, get_roster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role_Privileges, post_roster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role_Privileges, get_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role_Privileges, put_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role_Privileges, delete_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role_Privileges, get_panel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role_Privileges, get_control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role_Privileges, put_control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role_Privileges, post_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role_Privileges, get_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role_Privileges, post_model_),
  };
  Role_Privileges_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Role_Privileges_descriptor_,
      Role_Privileges::default_instance_,
      Role_Privileges_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role_Privileges, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role_Privileges, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Role_Privileges));
  Role_Study_descriptor_ = Role_descriptor_->nested_type(2);
  static const int Role_Study_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role_Study, study_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role_Study, study_name_),
  };
  Role_Study_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Role_Study_descriptor_,
      Role_Study::default_instance_,
      Role_Study_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role_Study, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role_Study, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Role_Study));
  Panel_descriptor_ = file->message_type(4);
  static const int Panel_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel, study_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel, study_name_control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel, type_control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel, status_control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel, visibility_control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel, block_count_control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel, cell_count_control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel, prospect_count_control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel, creation_time_control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel, latest_block_time_control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel, latest_prospect_time_control_),
  };
  Panel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Panel_descriptor_,
      Panel::default_instance_,
      Panel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Panel));
  Panel_StudyNameControl_descriptor_ = Panel_descriptor_->nested_type(0);
  static const int Panel_StudyNameControl_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_StudyNameControl, study_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_StudyNameControl, study_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_StudyNameControl, location_),
  };
  Panel_StudyNameControl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Panel_StudyNameControl_descriptor_,
      Panel_StudyNameControl::default_instance_,
      Panel_StudyNameControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_StudyNameControl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_StudyNameControl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Panel_StudyNameControl));
  Panel_TypeControl_descriptor_ = Panel_descriptor_->nested_type(1);
  static const int Panel_TypeControl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_TypeControl, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_TypeControl, study_identifier_),
  };
  Panel_TypeControl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Panel_TypeControl_descriptor_,
      Panel_TypeControl::default_instance_,
      Panel_TypeControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_TypeControl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_TypeControl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Panel_TypeControl));
  Panel_StatusControl_descriptor_ = Panel_descriptor_->nested_type(2);
  static const int Panel_StatusControl_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_StatusControl, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_StatusControl, study_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_StatusControl, location_),
  };
  Panel_StatusControl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Panel_StatusControl_descriptor_,
      Panel_StatusControl::default_instance_,
      Panel_StatusControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_StatusControl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_StatusControl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Panel_StatusControl));
  Panel_VisibilityControl_descriptor_ = Panel_descriptor_->nested_type(3);
  static const int Panel_VisibilityControl_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_VisibilityControl, visibility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_VisibilityControl, study_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_VisibilityControl, location_),
  };
  Panel_VisibilityControl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Panel_VisibilityControl_descriptor_,
      Panel_VisibilityControl::default_instance_,
      Panel_VisibilityControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_VisibilityControl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_VisibilityControl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Panel_VisibilityControl));
  Panel_BlockCountControl_descriptor_ = Panel_descriptor_->nested_type(4);
  static const int Panel_BlockCountControl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_BlockCountControl, block_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_BlockCountControl, study_identifier_),
  };
  Panel_BlockCountControl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Panel_BlockCountControl_descriptor_,
      Panel_BlockCountControl::default_instance_,
      Panel_BlockCountControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_BlockCountControl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_BlockCountControl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Panel_BlockCountControl));
  Panel_CellCountControl_descriptor_ = Panel_descriptor_->nested_type(5);
  static const int Panel_CellCountControl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_CellCountControl, cell_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_CellCountControl, study_identifier_),
  };
  Panel_CellCountControl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Panel_CellCountControl_descriptor_,
      Panel_CellCountControl::default_instance_,
      Panel_CellCountControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_CellCountControl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_CellCountControl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Panel_CellCountControl));
  Panel_ProspectCountControl_descriptor_ = Panel_descriptor_->nested_type(6);
  static const int Panel_ProspectCountControl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_ProspectCountControl, prospect_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_ProspectCountControl, study_identifier_),
  };
  Panel_ProspectCountControl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Panel_ProspectCountControl_descriptor_,
      Panel_ProspectCountControl::default_instance_,
      Panel_ProspectCountControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_ProspectCountControl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_ProspectCountControl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Panel_ProspectCountControl));
  Panel_CreationTimeControl_descriptor_ = Panel_descriptor_->nested_type(7);
  static const int Panel_CreationTimeControl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_CreationTimeControl, creation_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_CreationTimeControl, study_identifier_),
  };
  Panel_CreationTimeControl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Panel_CreationTimeControl_descriptor_,
      Panel_CreationTimeControl::default_instance_,
      Panel_CreationTimeControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_CreationTimeControl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_CreationTimeControl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Panel_CreationTimeControl));
  Panel_LatestBlockTimeControl_descriptor_ = Panel_descriptor_->nested_type(8);
  static const int Panel_LatestBlockTimeControl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_LatestBlockTimeControl, latest_block_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_LatestBlockTimeControl, study_identifier_),
  };
  Panel_LatestBlockTimeControl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Panel_LatestBlockTimeControl_descriptor_,
      Panel_LatestBlockTimeControl::default_instance_,
      Panel_LatestBlockTimeControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_LatestBlockTimeControl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_LatestBlockTimeControl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Panel_LatestBlockTimeControl));
  Panel_LatestProspectTimeControl_descriptor_ = Panel_descriptor_->nested_type(9);
  static const int Panel_LatestProspectTimeControl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_LatestProspectTimeControl, latest_prospect_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_LatestProspectTimeControl, study_identifier_),
  };
  Panel_LatestProspectTimeControl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Panel_LatestProspectTimeControl_descriptor_,
      Panel_LatestProspectTimeControl::default_instance_,
      Panel_LatestProspectTimeControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_LatestProspectTimeControl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Panel_LatestProspectTimeControl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Panel_LatestProspectTimeControl));
  Block_descriptor_ = file->message_type(5);
  static const int Block_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, study_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, empty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, predictor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, specimen_),
  };
  Block_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Block_descriptor_,
      Block::default_instance_,
      Block_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Block));
  Predictor_descriptor_ = file->message_type(6);
  static const int Predictor_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Predictor, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Predictor, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Predictor, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Predictor, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Predictor, cell_),
  };
  Predictor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Predictor_descriptor_,
      Predictor::default_instance_,
      Predictor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Predictor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Predictor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Predictor));
  Predictor_Status_descriptor_ = Predictor_descriptor_->enum_type(0);
  Predictor_Type_descriptor_ = Predictor_descriptor_->enum_type(1);
  Predictor_Level_descriptor_ = Predictor_descriptor_->enum_type(2);
  Specimen_descriptor_ = file->message_type(7);
  static const int Specimen_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Specimen, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Specimen, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Specimen, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Specimen, empty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Specimen, natural_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Specimen, integer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Specimen, real_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Specimen, cell_),
  };
  Specimen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Specimen_descriptor_,
      Specimen::default_instance_,
      Specimen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Specimen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Specimen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Specimen));
  Specimen_Status_descriptor_ = Specimen_descriptor_->enum_type(0);
  Cell_descriptor_ = file->message_type(8);
  static const int Cell_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, empty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, natural_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, integer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, real_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, special_),
  };
  Cell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cell_descriptor_,
      Cell::default_instance_,
      Cell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cell));
  Message_descriptor_ = file->message_type(9);
  static const int Message_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, text_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  Message_Type_descriptor_ = Message_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_yosokumo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Catalog_descriptor_, &Catalog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Study_descriptor_, &Study::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Study_Owner_descriptor_, &Study_Owner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Study_Table_descriptor_, &Study_Table::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Study_Model_descriptor_, &Study_Model::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Study_Panel_descriptor_, &Study_Panel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Study_Roster_descriptor_, &Study_Roster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Roster_descriptor_, &Roster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Role_descriptor_, &Role::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Role_Roleholder_descriptor_, &Role_Roleholder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Role_Privileges_descriptor_, &Role_Privileges::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Role_Study_descriptor_, &Role_Study::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Panel_descriptor_, &Panel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Panel_StudyNameControl_descriptor_, &Panel_StudyNameControl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Panel_TypeControl_descriptor_, &Panel_TypeControl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Panel_StatusControl_descriptor_, &Panel_StatusControl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Panel_VisibilityControl_descriptor_, &Panel_VisibilityControl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Panel_BlockCountControl_descriptor_, &Panel_BlockCountControl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Panel_CellCountControl_descriptor_, &Panel_CellCountControl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Panel_ProspectCountControl_descriptor_, &Panel_ProspectCountControl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Panel_CreationTimeControl_descriptor_, &Panel_CreationTimeControl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Panel_LatestBlockTimeControl_descriptor_, &Panel_LatestBlockTimeControl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Panel_LatestProspectTimeControl_descriptor_, &Panel_LatestProspectTimeControl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Block_descriptor_, &Block::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Predictor_descriptor_, &Predictor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Specimen_descriptor_, &Specimen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cell_descriptor_, &Cell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_yosokumo_2eproto() {
  delete Catalog::default_instance_;
  delete Catalog_reflection_;
  delete Study::default_instance_;
  delete Study_reflection_;
  delete Study_Owner::default_instance_;
  delete Study_Owner_reflection_;
  delete Study_Table::default_instance_;
  delete Study_Table_reflection_;
  delete Study_Model::default_instance_;
  delete Study_Model_reflection_;
  delete Study_Panel::default_instance_;
  delete Study_Panel_reflection_;
  delete Study_Roster::default_instance_;
  delete Study_Roster_reflection_;
  delete Roster::default_instance_;
  delete Roster_reflection_;
  delete Role::default_instance_;
  delete Role_reflection_;
  delete Role_Roleholder::default_instance_;
  delete Role_Roleholder_reflection_;
  delete Role_Privileges::default_instance_;
  delete Role_Privileges_reflection_;
  delete Role_Study::default_instance_;
  delete Role_Study_reflection_;
  delete Panel::default_instance_;
  delete Panel_reflection_;
  delete Panel_StudyNameControl::default_instance_;
  delete Panel_StudyNameControl_reflection_;
  delete Panel_TypeControl::default_instance_;
  delete Panel_TypeControl_reflection_;
  delete Panel_StatusControl::default_instance_;
  delete Panel_StatusControl_reflection_;
  delete Panel_VisibilityControl::default_instance_;
  delete Panel_VisibilityControl_reflection_;
  delete Panel_BlockCountControl::default_instance_;
  delete Panel_BlockCountControl_reflection_;
  delete Panel_CellCountControl::default_instance_;
  delete Panel_CellCountControl_reflection_;
  delete Panel_ProspectCountControl::default_instance_;
  delete Panel_ProspectCountControl_reflection_;
  delete Panel_CreationTimeControl::default_instance_;
  delete Panel_CreationTimeControl_reflection_;
  delete Panel_LatestBlockTimeControl::default_instance_;
  delete Panel_LatestBlockTimeControl_reflection_;
  delete Panel_LatestProspectTimeControl::default_instance_;
  delete Panel_LatestProspectTimeControl_reflection_;
  delete Block::default_instance_;
  delete Block_reflection_;
  delete Predictor::default_instance_;
  delete Predictor_reflection_;
  delete Specimen::default_instance_;
  delete Specimen_reflection_;
  delete Cell::default_instance_;
  delete Cell_reflection_;
  delete Message::default_instance_;
  delete Message_reflection_;
}

void protobuf_AddDesc_yosokumo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016yosokumo.proto\022\010ProtoBuf\"g\n\007Catalog\022\027\n"
    "\017user_identifier\030\001 \002(\t\022\021\n\tuser_name\030f \001("
    "\t\022\020\n\010location\030g \001(\t\022\036\n\005study\030\004 \003(\0132\017.Pro"
    "toBuf.Study\"\262\005\n\005Study\022\030\n\020study_identifie"
    "r\030\001 \002(\t\022\022\n\nstudy_name\030f \001(\t\022\"\n\004type\030g \001("
    "\0162\024.ProtoBuf.Study.Type\022&\n\006status\030h \001(\0162"
    "\026.ProtoBuf.Study.Status\022.\n\nvisibility\030i "
    "\001(\0162\032.ProtoBuf.Study.Visibility\022\020\n\010locat"
    "ion\030j \001(\t\022$\n\005owner\030k \001(\0132\025.ProtoBuf.Stud"
    "y.Owner\022$\n\005table\030l \001(\0132\025.ProtoBuf.Study."
    "Table\022$\n\005model\030m \001(\0132\025.ProtoBuf.Study.Mo"
    "del\022$\n\005panel\030n \001(\0132\025.ProtoBuf.Study.Pane"
    "l\022&\n\006roster\030o \001(\0132\026.ProtoBuf.Study.Roste"
    "r\0323\n\005Owner\022\027\n\017user_identifier\030\001 \002(\t\022\021\n\tu"
    "ser_name\030f \001(\t\032\031\n\005Table\022\020\n\010location\030e \001("
    "\t\032\031\n\005Model\022\020\n\010location\030e \001(\t\032\031\n\005Panel\022\020\n"
    "\010location\030e \001(\t\032\032\n\006Roster\022\020\n\010location\030e "
    "\001(\t\"3\n\004Type\022\t\n\005Class\020\001\022\010\n\004Rank\020\002\022\n\n\006Numb"
    "er\020\003\022\n\n\006Chance\020\004\"/\n\006Status\022\013\n\007Running\020\001\022"
    "\013\n\007Standby\020\002\022\013\n\007Stopped\020\003\"%\n\nVisibility\022"
    "\013\n\007Private\020\001\022\n\n\006Public\020\002\"f\n\006Roster\022\030\n\020st"
    "udy_identifier\030\001 \002(\t\022\022\n\nstudy_name\030f \001(\t"
    "\022\020\n\010location\030g \001(\t\022\034\n\004role\030\004 \003(\0132\016.Proto"
    "Buf.Role\"\236\004\n\004Role\022\020\n\010location\030e \001(\t\022-\n\nr"
    "oleholder\030f \001(\0132\031.ProtoBuf.Role.Rolehold"
    "er\022-\n\nprivileges\030g \001(\0132\031.ProtoBuf.Role.P"
    "rivileges\022#\n\005study\030h \001(\0132\024.ProtoBuf.Role"
    ".Study\0328\n\nRoleholder\022\027\n\017user_identifier\030"
    "\001 \002(\t\022\021\n\tuser_name\030f \001(\t\032\217\002\n\nPrivileges\022"
    "\021\n\tget_study\030\001 \001(\010\022\024\n\014delete_study\030\002 \001(\010"
    "\022\022\n\nget_roster\030\003 \001(\010\022\023\n\013post_roster\030\004 \001("
    "\010\022\020\n\010get_role\030\005 \001(\010\022\020\n\010put_role\030\006 \001(\010\022\023\n"
    "\013delete_role\030\007 \001(\010\022\021\n\tget_panel\030\010 \001(\010\022\023\n"
    "\013get_control\030\t \001(\010\022\023\n\013put_control\030\n \001(\010\022"
    "\022\n\npost_table\030\013 \001(\010\022\021\n\tget_model\030\014 \001(\010\022\022"
    "\n\npost_model\030\r \001(\010\0325\n\005Study\022\030\n\020study_ide"
    "ntifier\030\001 \002(\t\022\022\n\nstudy_name\030f \001(\t\"\361\013\n\005Pa"
    "nel\022\030\n\020study_identifier\030\001 \002(\t\022\020\n\010locatio"
    "n\030f \001(\t\022<\n\022study_name_control\030g \001(\0132 .Pr"
    "otoBuf.Panel.StudyNameControl\0221\n\014type_co"
    "ntrol\030h \001(\0132\033.ProtoBuf.Panel.TypeControl"
    "\0225\n\016status_control\030i \001(\0132\035.ProtoBuf.Pane"
    "l.StatusControl\022=\n\022visibility_control\030j "
    "\001(\0132!.ProtoBuf.Panel.VisibilityControl\022>"
    "\n\023block_count_control\030k \001(\0132!.ProtoBuf.P"
    "anel.BlockCountControl\022<\n\022cell_count_con"
    "trol\030l \001(\0132 .ProtoBuf.Panel.CellCountCon"
    "trol\022D\n\026prospect_count_control\030m \001(\0132$.P"
    "rotoBuf.Panel.ProspectCountControl\022B\n\025cr"
    "eation_time_control\030n \001(\0132#.ProtoBuf.Pan"
    "el.CreationTimeControl\022I\n\031latest_block_t"
    "ime_control\030o \001(\0132&.ProtoBuf.Panel.Lates"
    "tBlockTimeControl\022O\n\034latest_prospect_tim"
    "e_control\030p \001(\0132).ProtoBuf.Panel.LatestP"
    "rospectTimeControl\032R\n\020StudyNameControl\022\022"
    "\n\nstudy_name\030\001 \002(\t\022\030\n\020study_identifier\030f"
    " \001(\t\022\020\n\010location\030g \001(\t\032K\n\013TypeControl\022\"\n"
    "\004type\030\001 \002(\0162\024.ProtoBuf.Study.Type\022\030\n\020stu"
    "dy_identifier\030f \001(\t\032c\n\rStatusControl\022&\n\006"
    "status\030\001 \002(\0162\026.ProtoBuf.Study.Status\022\030\n\020"
    "study_identifier\030f \001(\t\022\020\n\010location\030g \001(\t"
    "\032o\n\021VisibilityControl\022.\n\nvisibility\030\001 \002("
    "\0162\032.ProtoBuf.Study.Visibility\022\030\n\020study_i"
    "dentifier\030f \001(\t\022\020\n\010location\030g \001(\t\032B\n\021Blo"
    "ckCountControl\022\023\n\013block_count\030\001 \002(\004\022\030\n\020s"
    "tudy_identifier\030f \001(\t\032@\n\020CellCountContro"
    "l\022\022\n\ncell_count\030\001 \002(\004\022\030\n\020study_identifie"
    "r\030f \001(\t\032H\n\024ProspectCountControl\022\026\n\016prosp"
    "ect_count\030\001 \002(\004\022\030\n\020study_identifier\030f \001("
    "\t\032F\n\023CreationTimeControl\022\025\n\rcreation_tim"
    "e\030\001 \002(\t\022\030\n\020study_identifier\030f \001(\t\032M\n\026Lat"
    "estBlockTimeControl\022\031\n\021latest_block_time"
    "\030\001 \002(\t\022\030\n\020study_identifier\030f \001(\t\032S\n\031Late"
    "stProspectTimeControl\022\034\n\024latest_prospect"
    "_time\030\001 \002(\t\022\030\n\020study_identifier\030f \001(\t\"\204\001"
    "\n\005Block\022\030\n\020study_identifier\030\001 \001(\t\022\023\n\005emp"
    "ty\030\002 \001(\010:\004true\022&\n\tpredictor\030\003 \003(\0132\023.Prot"
    "oBuf.Predictor\022$\n\010specimen\030\004 \003(\0132\022.Proto"
    "Buf.Specimen\"\276\002\n\tPredictor\022\014\n\004name\030\001 \002(\004"
    "\022*\n\006status\030\002 \001(\0162\032.ProtoBuf.Predictor.St"
    "atus\022&\n\004type\030\003 \001(\0162\030.ProtoBuf.Predictor."
    "Type\022(\n\005level\030\004 \001(\0162\031.ProtoBuf.Predictor"
    ".Level\022\034\n\004cell\030\005 \003(\0132\016.ProtoBuf.Cell\"\"\n\006"
    "Status\022\n\n\006Active\020\001\022\014\n\010Inactive\020\002\"\'\n\004Type"
    "\022\017\n\013Categorical\020\001\022\016\n\nContinuous\020\002\":\n\005Lev"
    "el\022\013\n\007Nominal\020\001\022\013\n\007Ordinal\020\002\022\014\n\010Interval"
    "\020\003\022\t\n\005Ratio\020\004\"\331\001\n\010Specimen\022\013\n\003key\030\001 \001(\004\022"
    ")\n\006status\030\002 \001(\0162\031.ProtoBuf.Specimen.Stat"
    "us\022\016\n\006weight\030\003 \001(\004\022\023\n\005empty\030\004 \001(\010:\004true\022"
    "\017\n\007natural\030\005 \001(\004\022\017\n\007integer\030\006 \001(\022\022\014\n\004rea"
    "l\030\007 \001(\001\022\034\n\004cell\030\010 \003(\0132\016.ProtoBuf.Cell\"\"\n"
    "\006Status\022\n\n\006Active\020\001\022\014\n\010Inactive\020\002\"w\n\004Cel"
    "l\022\014\n\004name\030\001 \001(\004\022\013\n\003key\030\002 \001(\004\022\023\n\005empty\030\003 "
    "\001(\010:\004true\022\017\n\007natural\030\004 \001(\004\022\017\n\007integer\030\005 "
    "\001(\022\022\014\n\004real\030\006 \001(\001\022\017\n\007special\030\007 \001(\004\"a\n\007Me"
    "ssage\022$\n\004type\030e \001(\0162\026.ProtoBuf.Message.T"
    "ype\022\014\n\004text\030f \001(\t\"\"\n\004Type\022\017\n\013Information"
    "\020\001\022\t\n\005Error\020\002", 3893);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "yosokumo.proto", &protobuf_RegisterTypes);
  Catalog::default_instance_ = new Catalog();
  Study::default_instance_ = new Study();
  Study_Owner::default_instance_ = new Study_Owner();
  Study_Table::default_instance_ = new Study_Table();
  Study_Model::default_instance_ = new Study_Model();
  Study_Panel::default_instance_ = new Study_Panel();
  Study_Roster::default_instance_ = new Study_Roster();
  Roster::default_instance_ = new Roster();
  Role::default_instance_ = new Role();
  Role_Roleholder::default_instance_ = new Role_Roleholder();
  Role_Privileges::default_instance_ = new Role_Privileges();
  Role_Study::default_instance_ = new Role_Study();
  Panel::default_instance_ = new Panel();
  Panel_StudyNameControl::default_instance_ = new Panel_StudyNameControl();
  Panel_TypeControl::default_instance_ = new Panel_TypeControl();
  Panel_StatusControl::default_instance_ = new Panel_StatusControl();
  Panel_VisibilityControl::default_instance_ = new Panel_VisibilityControl();
  Panel_BlockCountControl::default_instance_ = new Panel_BlockCountControl();
  Panel_CellCountControl::default_instance_ = new Panel_CellCountControl();
  Panel_ProspectCountControl::default_instance_ = new Panel_ProspectCountControl();
  Panel_CreationTimeControl::default_instance_ = new Panel_CreationTimeControl();
  Panel_LatestBlockTimeControl::default_instance_ = new Panel_LatestBlockTimeControl();
  Panel_LatestProspectTimeControl::default_instance_ = new Panel_LatestProspectTimeControl();
  Block::default_instance_ = new Block();
  Predictor::default_instance_ = new Predictor();
  Specimen::default_instance_ = new Specimen();
  Cell::default_instance_ = new Cell();
  Message::default_instance_ = new Message();
  Catalog::default_instance_->InitAsDefaultInstance();
  Study::default_instance_->InitAsDefaultInstance();
  Study_Owner::default_instance_->InitAsDefaultInstance();
  Study_Table::default_instance_->InitAsDefaultInstance();
  Study_Model::default_instance_->InitAsDefaultInstance();
  Study_Panel::default_instance_->InitAsDefaultInstance();
  Study_Roster::default_instance_->InitAsDefaultInstance();
  Roster::default_instance_->InitAsDefaultInstance();
  Role::default_instance_->InitAsDefaultInstance();
  Role_Roleholder::default_instance_->InitAsDefaultInstance();
  Role_Privileges::default_instance_->InitAsDefaultInstance();
  Role_Study::default_instance_->InitAsDefaultInstance();
  Panel::default_instance_->InitAsDefaultInstance();
  Panel_StudyNameControl::default_instance_->InitAsDefaultInstance();
  Panel_TypeControl::default_instance_->InitAsDefaultInstance();
  Panel_StatusControl::default_instance_->InitAsDefaultInstance();
  Panel_VisibilityControl::default_instance_->InitAsDefaultInstance();
  Panel_BlockCountControl::default_instance_->InitAsDefaultInstance();
  Panel_CellCountControl::default_instance_->InitAsDefaultInstance();
  Panel_ProspectCountControl::default_instance_->InitAsDefaultInstance();
  Panel_CreationTimeControl::default_instance_->InitAsDefaultInstance();
  Panel_LatestBlockTimeControl::default_instance_->InitAsDefaultInstance();
  Panel_LatestProspectTimeControl::default_instance_->InitAsDefaultInstance();
  Block::default_instance_->InitAsDefaultInstance();
  Predictor::default_instance_->InitAsDefaultInstance();
  Specimen::default_instance_->InitAsDefaultInstance();
  Cell::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_yosokumo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_yosokumo_2eproto {
  StaticDescriptorInitializer_yosokumo_2eproto() {
    protobuf_AddDesc_yosokumo_2eproto();
  }
} static_descriptor_initializer_yosokumo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Catalog::kUserIdentifierFieldNumber;
const int Catalog::kUserNameFieldNumber;
const int Catalog::kLocationFieldNumber;
const int Catalog::kStudyFieldNumber;
#endif  // !_MSC_VER

Catalog::Catalog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Catalog::InitAsDefaultInstance() {
}

Catalog::Catalog(const Catalog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Catalog::SharedCtor() {
  _cached_size_ = 0;
  user_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Catalog::~Catalog() {
  SharedDtor();
}

void Catalog::SharedDtor() {
  if (user_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete user_identifier_;
  }
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (location_ != &::google::protobuf::internal::kEmptyString) {
    delete location_;
  }
  if (this != default_instance_) {
  }
}

void Catalog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Catalog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Catalog_descriptor_;
}

const Catalog& Catalog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yosokumo_2eproto();
  return *default_instance_;
}

Catalog* Catalog::default_instance_ = NULL;

Catalog* Catalog::New() const {
  return new Catalog;
}

void Catalog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_identifier()) {
      if (user_identifier_ != &::google::protobuf::internal::kEmptyString) {
        user_identifier_->clear();
      }
    }
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::kEmptyString) {
        location_->clear();
      }
    }
  }
  study_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Catalog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_identifier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_identifier().data(), this->user_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_study;
        break;
      }

      // repeated .ProtoBuf.Study study = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_study:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_study()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_study;
        if (input->ExpectTag(818)) goto parse_user_name;
        break;
      }

      // optional string user_name = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_location;
        break;
      }

      // optional string location = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Catalog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_identifier = 1;
  if (has_user_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_identifier().data(), this->user_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_identifier(), output);
  }

  // repeated .ProtoBuf.Study study = 4;
  for (int i = 0; i < this->study_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->study(i), output);
  }

  // optional string user_name = 102;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      102, this->user_name(), output);
  }

  // optional string location = 103;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      103, this->location(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Catalog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_identifier = 1;
  if (has_user_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_identifier().data(), this->user_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_identifier(), target);
  }

  // repeated .ProtoBuf.Study study = 4;
  for (int i = 0; i < this->study_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->study(i), target);
  }

  // optional string user_name = 102;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->user_name(), target);
  }

  // optional string location = 103;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        103, this->location(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Catalog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_identifier = 1;
    if (has_user_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_identifier());
    }

    // optional string user_name = 102;
    if (has_user_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string location = 103;
    if (has_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

  }
  // repeated .ProtoBuf.Study study = 4;
  total_size += 1 * this->study_size();
  for (int i = 0; i < this->study_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->study(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Catalog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Catalog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Catalog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Catalog::MergeFrom(const Catalog& from) {
  GOOGLE_CHECK_NE(&from, this);
  study_.MergeFrom(from.study_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_identifier()) {
      set_user_identifier(from.user_identifier());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Catalog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Catalog::CopyFrom(const Catalog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Catalog::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < study_size(); i++) {
    if (!this->study(i).IsInitialized()) return false;
  }
  return true;
}

void Catalog::Swap(Catalog* other) {
  if (other != this) {
    std::swap(user_identifier_, other->user_identifier_);
    std::swap(user_name_, other->user_name_);
    std::swap(location_, other->location_);
    study_.Swap(&other->study_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Catalog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Catalog_descriptor_;
  metadata.reflection = Catalog_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Study_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Study_Type_descriptor_;
}
bool Study_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Study_Type Study::Class;
const Study_Type Study::Rank;
const Study_Type Study::Number;
const Study_Type Study::Chance;
const Study_Type Study::Type_MIN;
const Study_Type Study::Type_MAX;
const int Study::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Study_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Study_Status_descriptor_;
}
bool Study_Status_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Study_Status Study::Running;
const Study_Status Study::Standby;
const Study_Status Study::Stopped;
const Study_Status Study::Status_MIN;
const Study_Status Study::Status_MAX;
const int Study::Status_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Study_Visibility_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Study_Visibility_descriptor_;
}
bool Study_Visibility_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Study_Visibility Study::Private;
const Study_Visibility Study::Public;
const Study_Visibility Study::Visibility_MIN;
const Study_Visibility Study::Visibility_MAX;
const int Study::Visibility_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Study_Owner::kUserIdentifierFieldNumber;
const int Study_Owner::kUserNameFieldNumber;
#endif  // !_MSC_VER

Study_Owner::Study_Owner()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Study_Owner::InitAsDefaultInstance() {
}

Study_Owner::Study_Owner(const Study_Owner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Study_Owner::SharedCtor() {
  _cached_size_ = 0;
  user_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Study_Owner::~Study_Owner() {
  SharedDtor();
}

void Study_Owner::SharedDtor() {
  if (user_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete user_identifier_;
  }
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void Study_Owner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Study_Owner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Study_Owner_descriptor_;
}

const Study_Owner& Study_Owner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yosokumo_2eproto();
  return *default_instance_;
}

Study_Owner* Study_Owner::default_instance_ = NULL;

Study_Owner* Study_Owner::New() const {
  return new Study_Owner;
}

void Study_Owner::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_identifier()) {
      if (user_identifier_ != &::google::protobuf::internal::kEmptyString) {
        user_identifier_->clear();
      }
    }
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Study_Owner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_identifier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_identifier().data(), this->user_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_user_name;
        break;
      }

      // optional string user_name = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Study_Owner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_identifier = 1;
  if (has_user_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_identifier().data(), this->user_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_identifier(), output);
  }

  // optional string user_name = 102;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      102, this->user_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Study_Owner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_identifier = 1;
  if (has_user_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_identifier().data(), this->user_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_identifier(), target);
  }

  // optional string user_name = 102;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->user_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Study_Owner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_identifier = 1;
    if (has_user_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_identifier());
    }

    // optional string user_name = 102;
    if (has_user_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Study_Owner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Study_Owner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Study_Owner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Study_Owner::MergeFrom(const Study_Owner& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_identifier()) {
      set_user_identifier(from.user_identifier());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Study_Owner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Study_Owner::CopyFrom(const Study_Owner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Study_Owner::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Study_Owner::Swap(Study_Owner* other) {
  if (other != this) {
    std::swap(user_identifier_, other->user_identifier_);
    std::swap(user_name_, other->user_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Study_Owner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Study_Owner_descriptor_;
  metadata.reflection = Study_Owner_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Study_Table::kLocationFieldNumber;
#endif  // !_MSC_VER

Study_Table::Study_Table()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Study_Table::InitAsDefaultInstance() {
}

Study_Table::Study_Table(const Study_Table& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Study_Table::SharedCtor() {
  _cached_size_ = 0;
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Study_Table::~Study_Table() {
  SharedDtor();
}

void Study_Table::SharedDtor() {
  if (location_ != &::google::protobuf::internal::kEmptyString) {
    delete location_;
  }
  if (this != default_instance_) {
  }
}

void Study_Table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Study_Table::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Study_Table_descriptor_;
}

const Study_Table& Study_Table::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yosokumo_2eproto();
  return *default_instance_;
}

Study_Table* Study_Table::default_instance_ = NULL;

Study_Table* Study_Table::New() const {
  return new Study_Table;
}

void Study_Table::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::kEmptyString) {
        location_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Study_Table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string location = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Study_Table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string location = 101;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      101, this->location(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Study_Table::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string location = 101;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        101, this->location(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Study_Table::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string location = 101;
    if (has_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Study_Table::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Study_Table* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Study_Table*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Study_Table::MergeFrom(const Study_Table& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_location()) {
      set_location(from.location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Study_Table::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Study_Table::CopyFrom(const Study_Table& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Study_Table::IsInitialized() const {

  return true;
}

void Study_Table::Swap(Study_Table* other) {
  if (other != this) {
    std::swap(location_, other->location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Study_Table::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Study_Table_descriptor_;
  metadata.reflection = Study_Table_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Study_Model::kLocationFieldNumber;
#endif  // !_MSC_VER

Study_Model::Study_Model()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Study_Model::InitAsDefaultInstance() {
}

Study_Model::Study_Model(const Study_Model& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Study_Model::SharedCtor() {
  _cached_size_ = 0;
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Study_Model::~Study_Model() {
  SharedDtor();
}

void Study_Model::SharedDtor() {
  if (location_ != &::google::protobuf::internal::kEmptyString) {
    delete location_;
  }
  if (this != default_instance_) {
  }
}

void Study_Model::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Study_Model::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Study_Model_descriptor_;
}

const Study_Model& Study_Model::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yosokumo_2eproto();
  return *default_instance_;
}

Study_Model* Study_Model::default_instance_ = NULL;

Study_Model* Study_Model::New() const {
  return new Study_Model;
}

void Study_Model::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::kEmptyString) {
        location_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Study_Model::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string location = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Study_Model::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string location = 101;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      101, this->location(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Study_Model::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string location = 101;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        101, this->location(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Study_Model::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string location = 101;
    if (has_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Study_Model::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Study_Model* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Study_Model*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Study_Model::MergeFrom(const Study_Model& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_location()) {
      set_location(from.location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Study_Model::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Study_Model::CopyFrom(const Study_Model& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Study_Model::IsInitialized() const {

  return true;
}

void Study_Model::Swap(Study_Model* other) {
  if (other != this) {
    std::swap(location_, other->location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Study_Model::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Study_Model_descriptor_;
  metadata.reflection = Study_Model_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Study_Panel::kLocationFieldNumber;
#endif  // !_MSC_VER

Study_Panel::Study_Panel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Study_Panel::InitAsDefaultInstance() {
}

Study_Panel::Study_Panel(const Study_Panel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Study_Panel::SharedCtor() {
  _cached_size_ = 0;
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Study_Panel::~Study_Panel() {
  SharedDtor();
}

void Study_Panel::SharedDtor() {
  if (location_ != &::google::protobuf::internal::kEmptyString) {
    delete location_;
  }
  if (this != default_instance_) {
  }
}

void Study_Panel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Study_Panel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Study_Panel_descriptor_;
}

const Study_Panel& Study_Panel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yosokumo_2eproto();
  return *default_instance_;
}

Study_Panel* Study_Panel::default_instance_ = NULL;

Study_Panel* Study_Panel::New() const {
  return new Study_Panel;
}

void Study_Panel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::kEmptyString) {
        location_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Study_Panel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string location = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Study_Panel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string location = 101;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      101, this->location(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Study_Panel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string location = 101;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        101, this->location(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Study_Panel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string location = 101;
    if (has_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Study_Panel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Study_Panel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Study_Panel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Study_Panel::MergeFrom(const Study_Panel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_location()) {
      set_location(from.location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Study_Panel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Study_Panel::CopyFrom(const Study_Panel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Study_Panel::IsInitialized() const {

  return true;
}

void Study_Panel::Swap(Study_Panel* other) {
  if (other != this) {
    std::swap(location_, other->location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Study_Panel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Study_Panel_descriptor_;
  metadata.reflection = Study_Panel_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Study_Roster::kLocationFieldNumber;
#endif  // !_MSC_VER

Study_Roster::Study_Roster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Study_Roster::InitAsDefaultInstance() {
}

Study_Roster::Study_Roster(const Study_Roster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Study_Roster::SharedCtor() {
  _cached_size_ = 0;
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Study_Roster::~Study_Roster() {
  SharedDtor();
}

void Study_Roster::SharedDtor() {
  if (location_ != &::google::protobuf::internal::kEmptyString) {
    delete location_;
  }
  if (this != default_instance_) {
  }
}

void Study_Roster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Study_Roster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Study_Roster_descriptor_;
}

const Study_Roster& Study_Roster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yosokumo_2eproto();
  return *default_instance_;
}

Study_Roster* Study_Roster::default_instance_ = NULL;

Study_Roster* Study_Roster::New() const {
  return new Study_Roster;
}

void Study_Roster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::kEmptyString) {
        location_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Study_Roster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string location = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Study_Roster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string location = 101;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      101, this->location(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Study_Roster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string location = 101;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        101, this->location(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Study_Roster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string location = 101;
    if (has_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Study_Roster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Study_Roster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Study_Roster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Study_Roster::MergeFrom(const Study_Roster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_location()) {
      set_location(from.location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Study_Roster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Study_Roster::CopyFrom(const Study_Roster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Study_Roster::IsInitialized() const {

  return true;
}

void Study_Roster::Swap(Study_Roster* other) {
  if (other != this) {
    std::swap(location_, other->location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Study_Roster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Study_Roster_descriptor_;
  metadata.reflection = Study_Roster_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Study::kStudyIdentifierFieldNumber;
const int Study::kStudyNameFieldNumber;
const int Study::kTypeFieldNumber;
const int Study::kStatusFieldNumber;
const int Study::kVisibilityFieldNumber;
const int Study::kLocationFieldNumber;
const int Study::kOwnerFieldNumber;
const int Study::kTableFieldNumber;
const int Study::kModelFieldNumber;
const int Study::kPanelFieldNumber;
const int Study::kRosterFieldNumber;
#endif  // !_MSC_VER

Study::Study()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Study::InitAsDefaultInstance() {
  owner_ = const_cast< ::ProtoBuf::Study_Owner*>(&::ProtoBuf::Study_Owner::default_instance());
  table_ = const_cast< ::ProtoBuf::Study_Table*>(&::ProtoBuf::Study_Table::default_instance());
  model_ = const_cast< ::ProtoBuf::Study_Model*>(&::ProtoBuf::Study_Model::default_instance());
  panel_ = const_cast< ::ProtoBuf::Study_Panel*>(&::ProtoBuf::Study_Panel::default_instance());
  roster_ = const_cast< ::ProtoBuf::Study_Roster*>(&::ProtoBuf::Study_Roster::default_instance());
}

Study::Study(const Study& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Study::SharedCtor() {
  _cached_size_ = 0;
  study_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  study_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  status_ = 1;
  visibility_ = 1;
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  owner_ = NULL;
  table_ = NULL;
  model_ = NULL;
  panel_ = NULL;
  roster_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Study::~Study() {
  SharedDtor();
}

void Study::SharedDtor() {
  if (study_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete study_identifier_;
  }
  if (study_name_ != &::google::protobuf::internal::kEmptyString) {
    delete study_name_;
  }
  if (location_ != &::google::protobuf::internal::kEmptyString) {
    delete location_;
  }
  if (this != default_instance_) {
    delete owner_;
    delete table_;
    delete model_;
    delete panel_;
    delete roster_;
  }
}

void Study::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Study::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Study_descriptor_;
}

const Study& Study::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yosokumo_2eproto();
  return *default_instance_;
}

Study* Study::default_instance_ = NULL;

Study* Study::New() const {
  return new Study;
}

void Study::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_study_identifier()) {
      if (study_identifier_ != &::google::protobuf::internal::kEmptyString) {
        study_identifier_->clear();
      }
    }
    if (has_study_name()) {
      if (study_name_ != &::google::protobuf::internal::kEmptyString) {
        study_name_->clear();
      }
    }
    type_ = 1;
    status_ = 1;
    visibility_ = 1;
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::kEmptyString) {
        location_->clear();
      }
    }
    if (has_owner()) {
      if (owner_ != NULL) owner_->::ProtoBuf::Study_Owner::Clear();
    }
    if (has_table()) {
      if (table_ != NULL) table_->::ProtoBuf::Study_Table::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_model()) {
      if (model_ != NULL) model_->::ProtoBuf::Study_Model::Clear();
    }
    if (has_panel()) {
      if (panel_ != NULL) panel_->::ProtoBuf::Study_Panel::Clear();
    }
    if (has_roster()) {
      if (roster_ != NULL) roster_->::ProtoBuf::Study_Roster::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Study::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string study_identifier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_study_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->study_identifier().data(), this->study_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_study_name;
        break;
      }

      // optional string study_name = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_study_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_study_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->study_name().data(), this->study_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(824)) goto parse_type;
        break;
      }

      // optional .ProtoBuf.Study.Type type = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoBuf::Study_Type_IsValid(value)) {
            set_type(static_cast< ::ProtoBuf::Study_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(103, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(832)) goto parse_status;
        break;
      }

      // optional .ProtoBuf.Study.Status status = 104;
      case 104: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoBuf::Study_Status_IsValid(value)) {
            set_status(static_cast< ::ProtoBuf::Study_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(104, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(840)) goto parse_visibility;
        break;
      }

      // optional .ProtoBuf.Study.Visibility visibility = 105;
      case 105: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visibility:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoBuf::Study_Visibility_IsValid(value)) {
            set_visibility(static_cast< ::ProtoBuf::Study_Visibility >(value));
          } else {
            mutable_unknown_fields()->AddVarint(105, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(850)) goto parse_location;
        break;
      }

      // optional string location = 106;
      case 106: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(858)) goto parse_owner;
        break;
      }

      // optional .ProtoBuf.Study.Owner owner = 107;
      case 107: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(866)) goto parse_table;
        break;
      }

      // optional .ProtoBuf.Study.Table table = 108;
      case 108: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(874)) goto parse_model;
        break;
      }

      // optional .ProtoBuf.Study.Model model = 109;
      case 109: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_model()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(882)) goto parse_panel;
        break;
      }

      // optional .ProtoBuf.Study.Panel panel = 110;
      case 110: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_panel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_panel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(890)) goto parse_roster;
        break;
      }

      // optional .ProtoBuf.Study.Roster roster = 111;
      case 111: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Study::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string study_identifier = 1;
  if (has_study_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_identifier().data(), this->study_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->study_identifier(), output);
  }

  // optional string study_name = 102;
  if (has_study_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_name().data(), this->study_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      102, this->study_name(), output);
  }

  // optional .ProtoBuf.Study.Type type = 103;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      103, this->type(), output);
  }

  // optional .ProtoBuf.Study.Status status = 104;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      104, this->status(), output);
  }

  // optional .ProtoBuf.Study.Visibility visibility = 105;
  if (has_visibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      105, this->visibility(), output);
  }

  // optional string location = 106;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      106, this->location(), output);
  }

  // optional .ProtoBuf.Study.Owner owner = 107;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107, this->owner(), output);
  }

  // optional .ProtoBuf.Study.Table table = 108;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      108, this->table(), output);
  }

  // optional .ProtoBuf.Study.Model model = 109;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      109, this->model(), output);
  }

  // optional .ProtoBuf.Study.Panel panel = 110;
  if (has_panel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      110, this->panel(), output);
  }

  // optional .ProtoBuf.Study.Roster roster = 111;
  if (has_roster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      111, this->roster(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Study::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string study_identifier = 1;
  if (has_study_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_identifier().data(), this->study_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->study_identifier(), target);
  }

  // optional string study_name = 102;
  if (has_study_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_name().data(), this->study_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->study_name(), target);
  }

  // optional .ProtoBuf.Study.Type type = 103;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      103, this->type(), target);
  }

  // optional .ProtoBuf.Study.Status status = 104;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      104, this->status(), target);
  }

  // optional .ProtoBuf.Study.Visibility visibility = 105;
  if (has_visibility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      105, this->visibility(), target);
  }

  // optional string location = 106;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        106, this->location(), target);
  }

  // optional .ProtoBuf.Study.Owner owner = 107;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        107, this->owner(), target);
  }

  // optional .ProtoBuf.Study.Table table = 108;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        108, this->table(), target);
  }

  // optional .ProtoBuf.Study.Model model = 109;
  if (has_model()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        109, this->model(), target);
  }

  // optional .ProtoBuf.Study.Panel panel = 110;
  if (has_panel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        110, this->panel(), target);
  }

  // optional .ProtoBuf.Study.Roster roster = 111;
  if (has_roster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        111, this->roster(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Study::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string study_identifier = 1;
    if (has_study_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->study_identifier());
    }

    // optional string study_name = 102;
    if (has_study_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->study_name());
    }

    // optional .ProtoBuf.Study.Type type = 103;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .ProtoBuf.Study.Status status = 104;
    if (has_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .ProtoBuf.Study.Visibility visibility = 105;
    if (has_visibility()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->visibility());
    }

    // optional string location = 106;
    if (has_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

    // optional .ProtoBuf.Study.Owner owner = 107;
    if (has_owner()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->owner());
    }

    // optional .ProtoBuf.Study.Table table = 108;
    if (has_table()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .ProtoBuf.Study.Model model = 109;
    if (has_model()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->model());
    }

    // optional .ProtoBuf.Study.Panel panel = 110;
    if (has_panel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->panel());
    }

    // optional .ProtoBuf.Study.Roster roster = 111;
    if (has_roster()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roster());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Study::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Study* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Study*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Study::MergeFrom(const Study& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_study_identifier()) {
      set_study_identifier(from.study_identifier());
    }
    if (from.has_study_name()) {
      set_study_name(from.study_name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_visibility()) {
      set_visibility(from.visibility());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_owner()) {
      mutable_owner()->::ProtoBuf::Study_Owner::MergeFrom(from.owner());
    }
    if (from.has_table()) {
      mutable_table()->::ProtoBuf::Study_Table::MergeFrom(from.table());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_model()) {
      mutable_model()->::ProtoBuf::Study_Model::MergeFrom(from.model());
    }
    if (from.has_panel()) {
      mutable_panel()->::ProtoBuf::Study_Panel::MergeFrom(from.panel());
    }
    if (from.has_roster()) {
      mutable_roster()->::ProtoBuf::Study_Roster::MergeFrom(from.roster());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Study::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Study::CopyFrom(const Study& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Study::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_owner()) {
    if (!this->owner().IsInitialized()) return false;
  }
  return true;
}

void Study::Swap(Study* other) {
  if (other != this) {
    std::swap(study_identifier_, other->study_identifier_);
    std::swap(study_name_, other->study_name_);
    std::swap(type_, other->type_);
    std::swap(status_, other->status_);
    std::swap(visibility_, other->visibility_);
    std::swap(location_, other->location_);
    std::swap(owner_, other->owner_);
    std::swap(table_, other->table_);
    std::swap(model_, other->model_);
    std::swap(panel_, other->panel_);
    std::swap(roster_, other->roster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Study::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Study_descriptor_;
  metadata.reflection = Study_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Roster::kStudyIdentifierFieldNumber;
const int Roster::kStudyNameFieldNumber;
const int Roster::kLocationFieldNumber;
const int Roster::kRoleFieldNumber;
#endif  // !_MSC_VER

Roster::Roster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Roster::InitAsDefaultInstance() {
}

Roster::Roster(const Roster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Roster::SharedCtor() {
  _cached_size_ = 0;
  study_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  study_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Roster::~Roster() {
  SharedDtor();
}

void Roster::SharedDtor() {
  if (study_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete study_identifier_;
  }
  if (study_name_ != &::google::protobuf::internal::kEmptyString) {
    delete study_name_;
  }
  if (location_ != &::google::protobuf::internal::kEmptyString) {
    delete location_;
  }
  if (this != default_instance_) {
  }
}

void Roster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Roster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Roster_descriptor_;
}

const Roster& Roster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yosokumo_2eproto();
  return *default_instance_;
}

Roster* Roster::default_instance_ = NULL;

Roster* Roster::New() const {
  return new Roster;
}

void Roster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_study_identifier()) {
      if (study_identifier_ != &::google::protobuf::internal::kEmptyString) {
        study_identifier_->clear();
      }
    }
    if (has_study_name()) {
      if (study_name_ != &::google::protobuf::internal::kEmptyString) {
        study_name_->clear();
      }
    }
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::kEmptyString) {
        location_->clear();
      }
    }
  }
  role_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Roster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string study_identifier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_study_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->study_identifier().data(), this->study_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_role;
        break;
      }

      // repeated .ProtoBuf.Role role = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_role;
        if (input->ExpectTag(818)) goto parse_study_name;
        break;
      }

      // optional string study_name = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_study_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_study_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->study_name().data(), this->study_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_location;
        break;
      }

      // optional string location = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Roster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string study_identifier = 1;
  if (has_study_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_identifier().data(), this->study_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->study_identifier(), output);
  }

  // repeated .ProtoBuf.Role role = 4;
  for (int i = 0; i < this->role_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->role(i), output);
  }

  // optional string study_name = 102;
  if (has_study_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_name().data(), this->study_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      102, this->study_name(), output);
  }

  // optional string location = 103;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      103, this->location(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Roster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string study_identifier = 1;
  if (has_study_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_identifier().data(), this->study_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->study_identifier(), target);
  }

  // repeated .ProtoBuf.Role role = 4;
  for (int i = 0; i < this->role_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->role(i), target);
  }

  // optional string study_name = 102;
  if (has_study_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_name().data(), this->study_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->study_name(), target);
  }

  // optional string location = 103;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        103, this->location(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Roster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string study_identifier = 1;
    if (has_study_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->study_identifier());
    }

    // optional string study_name = 102;
    if (has_study_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->study_name());
    }

    // optional string location = 103;
    if (has_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

  }
  // repeated .ProtoBuf.Role role = 4;
  total_size += 1 * this->role_size();
  for (int i = 0; i < this->role_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Roster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Roster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Roster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Roster::MergeFrom(const Roster& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_.MergeFrom(from.role_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_study_identifier()) {
      set_study_identifier(from.study_identifier());
    }
    if (from.has_study_name()) {
      set_study_name(from.study_name());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Roster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Roster::CopyFrom(const Roster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Roster::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < role_size(); i++) {
    if (!this->role(i).IsInitialized()) return false;
  }
  return true;
}

void Roster::Swap(Roster* other) {
  if (other != this) {
    std::swap(study_identifier_, other->study_identifier_);
    std::swap(study_name_, other->study_name_);
    std::swap(location_, other->location_);
    role_.Swap(&other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Roster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Roster_descriptor_;
  metadata.reflection = Roster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Role_Roleholder::kUserIdentifierFieldNumber;
const int Role_Roleholder::kUserNameFieldNumber;
#endif  // !_MSC_VER

Role_Roleholder::Role_Roleholder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Role_Roleholder::InitAsDefaultInstance() {
}

Role_Roleholder::Role_Roleholder(const Role_Roleholder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Role_Roleholder::SharedCtor() {
  _cached_size_ = 0;
  user_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Role_Roleholder::~Role_Roleholder() {
  SharedDtor();
}

void Role_Roleholder::SharedDtor() {
  if (user_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete user_identifier_;
  }
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void Role_Roleholder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Role_Roleholder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Role_Roleholder_descriptor_;
}

const Role_Roleholder& Role_Roleholder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yosokumo_2eproto();
  return *default_instance_;
}

Role_Roleholder* Role_Roleholder::default_instance_ = NULL;

Role_Roleholder* Role_Roleholder::New() const {
  return new Role_Roleholder;
}

void Role_Roleholder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_identifier()) {
      if (user_identifier_ != &::google::protobuf::internal::kEmptyString) {
        user_identifier_->clear();
      }
    }
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Role_Roleholder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_identifier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_identifier().data(), this->user_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_user_name;
        break;
      }

      // optional string user_name = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Role_Roleholder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_identifier = 1;
  if (has_user_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_identifier().data(), this->user_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_identifier(), output);
  }

  // optional string user_name = 102;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      102, this->user_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Role_Roleholder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_identifier = 1;
  if (has_user_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_identifier().data(), this->user_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_identifier(), target);
  }

  // optional string user_name = 102;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->user_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Role_Roleholder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_identifier = 1;
    if (has_user_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_identifier());
    }

    // optional string user_name = 102;
    if (has_user_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Role_Roleholder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Role_Roleholder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Role_Roleholder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Role_Roleholder::MergeFrom(const Role_Roleholder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_identifier()) {
      set_user_identifier(from.user_identifier());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Role_Roleholder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Role_Roleholder::CopyFrom(const Role_Roleholder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Role_Roleholder::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Role_Roleholder::Swap(Role_Roleholder* other) {
  if (other != this) {
    std::swap(user_identifier_, other->user_identifier_);
    std::swap(user_name_, other->user_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Role_Roleholder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Role_Roleholder_descriptor_;
  metadata.reflection = Role_Roleholder_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Role_Privileges::kGetStudyFieldNumber;
const int Role_Privileges::kDeleteStudyFieldNumber;
const int Role_Privileges::kGetRosterFieldNumber;
const int Role_Privileges::kPostRosterFieldNumber;
const int Role_Privileges::kGetRoleFieldNumber;
const int Role_Privileges::kPutRoleFieldNumber;
const int Role_Privileges::kDeleteRoleFieldNumber;
const int Role_Privileges::kGetPanelFieldNumber;
const int Role_Privileges::kGetControlFieldNumber;
const int Role_Privileges::kPutControlFieldNumber;
const int Role_Privileges::kPostTableFieldNumber;
const int Role_Privileges::kGetModelFieldNumber;
const int Role_Privileges::kPostModelFieldNumber;
#endif  // !_MSC_VER

Role_Privileges::Role_Privileges()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Role_Privileges::InitAsDefaultInstance() {
}

Role_Privileges::Role_Privileges(const Role_Privileges& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Role_Privileges::SharedCtor() {
  _cached_size_ = 0;
  get_study_ = false;
  delete_study_ = false;
  get_roster_ = false;
  post_roster_ = false;
  get_role_ = false;
  put_role_ = false;
  delete_role_ = false;
  get_panel_ = false;
  get_control_ = false;
  put_control_ = false;
  post_table_ = false;
  get_model_ = false;
  post_model_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Role_Privileges::~Role_Privileges() {
  SharedDtor();
}

void Role_Privileges::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Role_Privileges::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Role_Privileges::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Role_Privileges_descriptor_;
}

const Role_Privileges& Role_Privileges::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yosokumo_2eproto();
  return *default_instance_;
}

Role_Privileges* Role_Privileges::default_instance_ = NULL;

Role_Privileges* Role_Privileges::New() const {
  return new Role_Privileges;
}

void Role_Privileges::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    get_study_ = false;
    delete_study_ = false;
    get_roster_ = false;
    post_roster_ = false;
    get_role_ = false;
    put_role_ = false;
    delete_role_ = false;
    get_panel_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    get_control_ = false;
    put_control_ = false;
    post_table_ = false;
    get_model_ = false;
    post_model_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Role_Privileges::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool get_study = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_study_)));
          set_has_get_study();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_delete_study;
        break;
      }

      // optional bool delete_study = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delete_study:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delete_study_)));
          set_has_delete_study();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_get_roster;
        break;
      }

      // optional bool get_roster = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_roster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_roster_)));
          set_has_get_roster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_post_roster;
        break;
      }

      // optional bool post_roster = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_post_roster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &post_roster_)));
          set_has_post_roster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_get_role;
        break;
      }

      // optional bool get_role = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_role_)));
          set_has_get_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_put_role;
        break;
      }

      // optional bool put_role = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_put_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &put_role_)));
          set_has_put_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_delete_role;
        break;
      }

      // optional bool delete_role = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delete_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delete_role_)));
          set_has_delete_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_get_panel;
        break;
      }

      // optional bool get_panel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_panel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_panel_)));
          set_has_get_panel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_get_control;
        break;
      }

      // optional bool get_control = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_control:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_control_)));
          set_has_get_control();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_put_control;
        break;
      }

      // optional bool put_control = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_put_control:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &put_control_)));
          set_has_put_control();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_post_table;
        break;
      }

      // optional bool post_table = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_post_table:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &post_table_)));
          set_has_post_table();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_get_model;
        break;
      }

      // optional bool get_model = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_model:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_model_)));
          set_has_get_model();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_post_model;
        break;
      }

      // optional bool post_model = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_post_model:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &post_model_)));
          set_has_post_model();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Role_Privileges::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool get_study = 1;
  if (has_get_study()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->get_study(), output);
  }

  // optional bool delete_study = 2;
  if (has_delete_study()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->delete_study(), output);
  }

  // optional bool get_roster = 3;
  if (has_get_roster()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->get_roster(), output);
  }

  // optional bool post_roster = 4;
  if (has_post_roster()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->post_roster(), output);
  }

  // optional bool get_role = 5;
  if (has_get_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->get_role(), output);
  }

  // optional bool put_role = 6;
  if (has_put_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->put_role(), output);
  }

  // optional bool delete_role = 7;
  if (has_delete_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->delete_role(), output);
  }

  // optional bool get_panel = 8;
  if (has_get_panel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->get_panel(), output);
  }

  // optional bool get_control = 9;
  if (has_get_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->get_control(), output);
  }

  // optional bool put_control = 10;
  if (has_put_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->put_control(), output);
  }

  // optional bool post_table = 11;
  if (has_post_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->post_table(), output);
  }

  // optional bool get_model = 12;
  if (has_get_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->get_model(), output);
  }

  // optional bool post_model = 13;
  if (has_post_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->post_model(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Role_Privileges::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool get_study = 1;
  if (has_get_study()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->get_study(), target);
  }

  // optional bool delete_study = 2;
  if (has_delete_study()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->delete_study(), target);
  }

  // optional bool get_roster = 3;
  if (has_get_roster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->get_roster(), target);
  }

  // optional bool post_roster = 4;
  if (has_post_roster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->post_roster(), target);
  }

  // optional bool get_role = 5;
  if (has_get_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->get_role(), target);
  }

  // optional bool put_role = 6;
  if (has_put_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->put_role(), target);
  }

  // optional bool delete_role = 7;
  if (has_delete_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->delete_role(), target);
  }

  // optional bool get_panel = 8;
  if (has_get_panel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->get_panel(), target);
  }

  // optional bool get_control = 9;
  if (has_get_control()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->get_control(), target);
  }

  // optional bool put_control = 10;
  if (has_put_control()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->put_control(), target);
  }

  // optional bool post_table = 11;
  if (has_post_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->post_table(), target);
  }

  // optional bool get_model = 12;
  if (has_get_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->get_model(), target);
  }

  // optional bool post_model = 13;
  if (has_post_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->post_model(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Role_Privileges::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool get_study = 1;
    if (has_get_study()) {
      total_size += 1 + 1;
    }

    // optional bool delete_study = 2;
    if (has_delete_study()) {
      total_size += 1 + 1;
    }

    // optional bool get_roster = 3;
    if (has_get_roster()) {
      total_size += 1 + 1;
    }

    // optional bool post_roster = 4;
    if (has_post_roster()) {
      total_size += 1 + 1;
    }

    // optional bool get_role = 5;
    if (has_get_role()) {
      total_size += 1 + 1;
    }

    // optional bool put_role = 6;
    if (has_put_role()) {
      total_size += 1 + 1;
    }

    // optional bool delete_role = 7;
    if (has_delete_role()) {
      total_size += 1 + 1;
    }

    // optional bool get_panel = 8;
    if (has_get_panel()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool get_control = 9;
    if (has_get_control()) {
      total_size += 1 + 1;
    }

    // optional bool put_control = 10;
    if (has_put_control()) {
      total_size += 1 + 1;
    }

    // optional bool post_table = 11;
    if (has_post_table()) {
      total_size += 1 + 1;
    }

    // optional bool get_model = 12;
    if (has_get_model()) {
      total_size += 1 + 1;
    }

    // optional bool post_model = 13;
    if (has_post_model()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Role_Privileges::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Role_Privileges* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Role_Privileges*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Role_Privileges::MergeFrom(const Role_Privileges& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_get_study()) {
      set_get_study(from.get_study());
    }
    if (from.has_delete_study()) {
      set_delete_study(from.delete_study());
    }
    if (from.has_get_roster()) {
      set_get_roster(from.get_roster());
    }
    if (from.has_post_roster()) {
      set_post_roster(from.post_roster());
    }
    if (from.has_get_role()) {
      set_get_role(from.get_role());
    }
    if (from.has_put_role()) {
      set_put_role(from.put_role());
    }
    if (from.has_delete_role()) {
      set_delete_role(from.delete_role());
    }
    if (from.has_get_panel()) {
      set_get_panel(from.get_panel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_get_control()) {
      set_get_control(from.get_control());
    }
    if (from.has_put_control()) {
      set_put_control(from.put_control());
    }
    if (from.has_post_table()) {
      set_post_table(from.post_table());
    }
    if (from.has_get_model()) {
      set_get_model(from.get_model());
    }
    if (from.has_post_model()) {
      set_post_model(from.post_model());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Role_Privileges::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Role_Privileges::CopyFrom(const Role_Privileges& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Role_Privileges::IsInitialized() const {

  return true;
}

void Role_Privileges::Swap(Role_Privileges* other) {
  if (other != this) {
    std::swap(get_study_, other->get_study_);
    std::swap(delete_study_, other->delete_study_);
    std::swap(get_roster_, other->get_roster_);
    std::swap(post_roster_, other->post_roster_);
    std::swap(get_role_, other->get_role_);
    std::swap(put_role_, other->put_role_);
    std::swap(delete_role_, other->delete_role_);
    std::swap(get_panel_, other->get_panel_);
    std::swap(get_control_, other->get_control_);
    std::swap(put_control_, other->put_control_);
    std::swap(post_table_, other->post_table_);
    std::swap(get_model_, other->get_model_);
    std::swap(post_model_, other->post_model_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Role_Privileges::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Role_Privileges_descriptor_;
  metadata.reflection = Role_Privileges_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Role_Study::kStudyIdentifierFieldNumber;
const int Role_Study::kStudyNameFieldNumber;
#endif  // !_MSC_VER

Role_Study::Role_Study()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Role_Study::InitAsDefaultInstance() {
}

Role_Study::Role_Study(const Role_Study& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Role_Study::SharedCtor() {
  _cached_size_ = 0;
  study_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  study_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Role_Study::~Role_Study() {
  SharedDtor();
}

void Role_Study::SharedDtor() {
  if (study_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete study_identifier_;
  }
  if (study_name_ != &::google::protobuf::internal::kEmptyString) {
    delete study_name_;
  }
  if (this != default_instance_) {
  }
}

void Role_Study::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Role_Study::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Role_Study_descriptor_;
}

const Role_Study& Role_Study::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yosokumo_2eproto();
  return *default_instance_;
}

Role_Study* Role_Study::default_instance_ = NULL;

Role_Study* Role_Study::New() const {
  return new Role_Study;
}

void Role_Study::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_study_identifier()) {
      if (study_identifier_ != &::google::protobuf::internal::kEmptyString) {
        study_identifier_->clear();
      }
    }
    if (has_study_name()) {
      if (study_name_ != &::google::protobuf::internal::kEmptyString) {
        study_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Role_Study::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string study_identifier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_study_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->study_identifier().data(), this->study_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_study_name;
        break;
      }

      // optional string study_name = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_study_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_study_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->study_name().data(), this->study_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Role_Study::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string study_identifier = 1;
  if (has_study_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_identifier().data(), this->study_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->study_identifier(), output);
  }

  // optional string study_name = 102;
  if (has_study_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_name().data(), this->study_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      102, this->study_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Role_Study::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string study_identifier = 1;
  if (has_study_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_identifier().data(), this->study_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->study_identifier(), target);
  }

  // optional string study_name = 102;
  if (has_study_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_name().data(), this->study_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->study_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Role_Study::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string study_identifier = 1;
    if (has_study_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->study_identifier());
    }

    // optional string study_name = 102;
    if (has_study_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->study_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Role_Study::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Role_Study* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Role_Study*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Role_Study::MergeFrom(const Role_Study& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_study_identifier()) {
      set_study_identifier(from.study_identifier());
    }
    if (from.has_study_name()) {
      set_study_name(from.study_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Role_Study::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Role_Study::CopyFrom(const Role_Study& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Role_Study::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Role_Study::Swap(Role_Study* other) {
  if (other != this) {
    std::swap(study_identifier_, other->study_identifier_);
    std::swap(study_name_, other->study_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Role_Study::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Role_Study_descriptor_;
  metadata.reflection = Role_Study_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Role::kLocationFieldNumber;
const int Role::kRoleholderFieldNumber;
const int Role::kPrivilegesFieldNumber;
const int Role::kStudyFieldNumber;
#endif  // !_MSC_VER

Role::Role()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Role::InitAsDefaultInstance() {
  roleholder_ = const_cast< ::ProtoBuf::Role_Roleholder*>(&::ProtoBuf::Role_Roleholder::default_instance());
  privileges_ = const_cast< ::ProtoBuf::Role_Privileges*>(&::ProtoBuf::Role_Privileges::default_instance());
  study_ = const_cast< ::ProtoBuf::Role_Study*>(&::ProtoBuf::Role_Study::default_instance());
}

Role::Role(const Role& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Role::SharedCtor() {
  _cached_size_ = 0;
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roleholder_ = NULL;
  privileges_ = NULL;
  study_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Role::~Role() {
  SharedDtor();
}

void Role::SharedDtor() {
  if (location_ != &::google::protobuf::internal::kEmptyString) {
    delete location_;
  }
  if (this != default_instance_) {
    delete roleholder_;
    delete privileges_;
    delete study_;
  }
}

void Role::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Role::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Role_descriptor_;
}

const Role& Role::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yosokumo_2eproto();
  return *default_instance_;
}

Role* Role::default_instance_ = NULL;

Role* Role::New() const {
  return new Role;
}

void Role::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::kEmptyString) {
        location_->clear();
      }
    }
    if (has_roleholder()) {
      if (roleholder_ != NULL) roleholder_->::ProtoBuf::Role_Roleholder::Clear();
    }
    if (has_privileges()) {
      if (privileges_ != NULL) privileges_->::ProtoBuf::Role_Privileges::Clear();
    }
    if (has_study()) {
      if (study_ != NULL) study_->::ProtoBuf::Role_Study::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Role::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string location = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_roleholder;
        break;
      }

      // optional .ProtoBuf.Role.Roleholder roleholder = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleholder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roleholder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_privileges;
        break;
      }

      // optional .ProtoBuf.Role.Privileges privileges = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_privileges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_privileges()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(834)) goto parse_study;
        break;
      }

      // optional .ProtoBuf.Role.Study study = 104;
      case 104: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_study:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_study()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Role::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string location = 101;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      101, this->location(), output);
  }

  // optional .ProtoBuf.Role.Roleholder roleholder = 102;
  if (has_roleholder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->roleholder(), output);
  }

  // optional .ProtoBuf.Role.Privileges privileges = 103;
  if (has_privileges()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->privileges(), output);
  }

  // optional .ProtoBuf.Role.Study study = 104;
  if (has_study()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, this->study(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Role::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string location = 101;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        101, this->location(), target);
  }

  // optional .ProtoBuf.Role.Roleholder roleholder = 102;
  if (has_roleholder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, this->roleholder(), target);
  }

  // optional .ProtoBuf.Role.Privileges privileges = 103;
  if (has_privileges()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->privileges(), target);
  }

  // optional .ProtoBuf.Role.Study study = 104;
  if (has_study()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        104, this->study(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Role::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string location = 101;
    if (has_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

    // optional .ProtoBuf.Role.Roleholder roleholder = 102;
    if (has_roleholder()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roleholder());
    }

    // optional .ProtoBuf.Role.Privileges privileges = 103;
    if (has_privileges()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->privileges());
    }

    // optional .ProtoBuf.Role.Study study = 104;
    if (has_study()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->study());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Role::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Role* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Role*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Role::MergeFrom(const Role& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_roleholder()) {
      mutable_roleholder()->::ProtoBuf::Role_Roleholder::MergeFrom(from.roleholder());
    }
    if (from.has_privileges()) {
      mutable_privileges()->::ProtoBuf::Role_Privileges::MergeFrom(from.privileges());
    }
    if (from.has_study()) {
      mutable_study()->::ProtoBuf::Role_Study::MergeFrom(from.study());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Role::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Role::CopyFrom(const Role& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Role::IsInitialized() const {

  if (has_roleholder()) {
    if (!this->roleholder().IsInitialized()) return false;
  }
  if (has_study()) {
    if (!this->study().IsInitialized()) return false;
  }
  return true;
}

void Role::Swap(Role* other) {
  if (other != this) {
    std::swap(location_, other->location_);
    std::swap(roleholder_, other->roleholder_);
    std::swap(privileges_, other->privileges_);
    std::swap(study_, other->study_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Role::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Role_descriptor_;
  metadata.reflection = Role_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Panel_StudyNameControl::kStudyNameFieldNumber;
const int Panel_StudyNameControl::kStudyIdentifierFieldNumber;
const int Panel_StudyNameControl::kLocationFieldNumber;
#endif  // !_MSC_VER

Panel_StudyNameControl::Panel_StudyNameControl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Panel_StudyNameControl::InitAsDefaultInstance() {
}

Panel_StudyNameControl::Panel_StudyNameControl(const Panel_StudyNameControl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Panel_StudyNameControl::SharedCtor() {
  _cached_size_ = 0;
  study_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  study_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Panel_StudyNameControl::~Panel_StudyNameControl() {
  SharedDtor();
}

void Panel_StudyNameControl::SharedDtor() {
  if (study_name_ != &::google::protobuf::internal::kEmptyString) {
    delete study_name_;
  }
  if (study_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete study_identifier_;
  }
  if (location_ != &::google::protobuf::internal::kEmptyString) {
    delete location_;
  }
  if (this != default_instance_) {
  }
}

void Panel_StudyNameControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Panel_StudyNameControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Panel_StudyNameControl_descriptor_;
}

const Panel_StudyNameControl& Panel_StudyNameControl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yosokumo_2eproto();
  return *default_instance_;
}

Panel_StudyNameControl* Panel_StudyNameControl::default_instance_ = NULL;

Panel_StudyNameControl* Panel_StudyNameControl::New() const {
  return new Panel_StudyNameControl;
}

void Panel_StudyNameControl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_study_name()) {
      if (study_name_ != &::google::protobuf::internal::kEmptyString) {
        study_name_->clear();
      }
    }
    if (has_study_identifier()) {
      if (study_identifier_ != &::google::protobuf::internal::kEmptyString) {
        study_identifier_->clear();
      }
    }
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::kEmptyString) {
        location_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Panel_StudyNameControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string study_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_study_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->study_name().data(), this->study_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_study_identifier;
        break;
      }

      // optional string study_identifier = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_study_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_study_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->study_identifier().data(), this->study_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_location;
        break;
      }

      // optional string location = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Panel_StudyNameControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string study_name = 1;
  if (has_study_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_name().data(), this->study_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->study_name(), output);
  }

  // optional string study_identifier = 102;
  if (has_study_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_identifier().data(), this->study_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      102, this->study_identifier(), output);
  }

  // optional string location = 103;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      103, this->location(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Panel_StudyNameControl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string study_name = 1;
  if (has_study_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_name().data(), this->study_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->study_name(), target);
  }

  // optional string study_identifier = 102;
  if (has_study_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_identifier().data(), this->study_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->study_identifier(), target);
  }

  // optional string location = 103;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        103, this->location(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Panel_StudyNameControl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string study_name = 1;
    if (has_study_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->study_name());
    }

    // optional string study_identifier = 102;
    if (has_study_identifier()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->study_identifier());
    }

    // optional string location = 103;
    if (has_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Panel_StudyNameControl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Panel_StudyNameControl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Panel_StudyNameControl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Panel_StudyNameControl::MergeFrom(const Panel_StudyNameControl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_study_name()) {
      set_study_name(from.study_name());
    }
    if (from.has_study_identifier()) {
      set_study_identifier(from.study_identifier());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Panel_StudyNameControl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Panel_StudyNameControl::CopyFrom(const Panel_StudyNameControl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Panel_StudyNameControl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Panel_StudyNameControl::Swap(Panel_StudyNameControl* other) {
  if (other != this) {
    std::swap(study_name_, other->study_name_);
    std::swap(study_identifier_, other->study_identifier_);
    std::swap(location_, other->location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Panel_StudyNameControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Panel_StudyNameControl_descriptor_;
  metadata.reflection = Panel_StudyNameControl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Panel_TypeControl::kTypeFieldNumber;
const int Panel_TypeControl::kStudyIdentifierFieldNumber;
#endif  // !_MSC_VER

Panel_TypeControl::Panel_TypeControl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Panel_TypeControl::InitAsDefaultInstance() {
}

Panel_TypeControl::Panel_TypeControl(const Panel_TypeControl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Panel_TypeControl::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  study_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Panel_TypeControl::~Panel_TypeControl() {
  SharedDtor();
}

void Panel_TypeControl::SharedDtor() {
  if (study_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete study_identifier_;
  }
  if (this != default_instance_) {
  }
}

void Panel_TypeControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Panel_TypeControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Panel_TypeControl_descriptor_;
}

const Panel_TypeControl& Panel_TypeControl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yosokumo_2eproto();
  return *default_instance_;
}

Panel_TypeControl* Panel_TypeControl::default_instance_ = NULL;

Panel_TypeControl* Panel_TypeControl::New() const {
  return new Panel_TypeControl;
}

void Panel_TypeControl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_study_identifier()) {
      if (study_identifier_ != &::google::protobuf::internal::kEmptyString) {
        study_identifier_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Panel_TypeControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoBuf.Study.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoBuf::Study_Type_IsValid(value)) {
            set_type(static_cast< ::ProtoBuf::Study_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_study_identifier;
        break;
      }

      // optional string study_identifier = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_study_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_study_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->study_identifier().data(), this->study_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Panel_TypeControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoBuf.Study.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string study_identifier = 102;
  if (has_study_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_identifier().data(), this->study_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      102, this->study_identifier(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Panel_TypeControl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoBuf.Study.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string study_identifier = 102;
  if (has_study_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_identifier().data(), this->study_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->study_identifier(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Panel_TypeControl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoBuf.Study.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string study_identifier = 102;
    if (has_study_identifier()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->study_identifier());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Panel_TypeControl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Panel_TypeControl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Panel_TypeControl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Panel_TypeControl::MergeFrom(const Panel_TypeControl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_study_identifier()) {
      set_study_identifier(from.study_identifier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Panel_TypeControl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Panel_TypeControl::CopyFrom(const Panel_TypeControl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Panel_TypeControl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Panel_TypeControl::Swap(Panel_TypeControl* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(study_identifier_, other->study_identifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Panel_TypeControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Panel_TypeControl_descriptor_;
  metadata.reflection = Panel_TypeControl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Panel_StatusControl::kStatusFieldNumber;
const int Panel_StatusControl::kStudyIdentifierFieldNumber;
const int Panel_StatusControl::kLocationFieldNumber;
#endif  // !_MSC_VER

Panel_StatusControl::Panel_StatusControl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Panel_StatusControl::InitAsDefaultInstance() {
}

Panel_StatusControl::Panel_StatusControl(const Panel_StatusControl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Panel_StatusControl::SharedCtor() {
  _cached_size_ = 0;
  status_ = 1;
  study_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Panel_StatusControl::~Panel_StatusControl() {
  SharedDtor();
}

void Panel_StatusControl::SharedDtor() {
  if (study_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete study_identifier_;
  }
  if (location_ != &::google::protobuf::internal::kEmptyString) {
    delete location_;
  }
  if (this != default_instance_) {
  }
}

void Panel_StatusControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Panel_StatusControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Panel_StatusControl_descriptor_;
}

const Panel_StatusControl& Panel_StatusControl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yosokumo_2eproto();
  return *default_instance_;
}

Panel_StatusControl* Panel_StatusControl::default_instance_ = NULL;

Panel_StatusControl* Panel_StatusControl::New() const {
  return new Panel_StatusControl;
}

void Panel_StatusControl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 1;
    if (has_study_identifier()) {
      if (study_identifier_ != &::google::protobuf::internal::kEmptyString) {
        study_identifier_->clear();
      }
    }
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::kEmptyString) {
        location_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Panel_StatusControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoBuf.Study.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoBuf::Study_Status_IsValid(value)) {
            set_status(static_cast< ::ProtoBuf::Study_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_study_identifier;
        break;
      }

      // optional string study_identifier = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_study_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_study_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->study_identifier().data(), this->study_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_location;
        break;
      }

      // optional string location = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Panel_StatusControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoBuf.Study.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string study_identifier = 102;
  if (has_study_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_identifier().data(), this->study_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      102, this->study_identifier(), output);
  }

  // optional string location = 103;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      103, this->location(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Panel_StatusControl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoBuf.Study.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string study_identifier = 102;
  if (has_study_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_identifier().data(), this->study_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->study_identifier(), target);
  }

  // optional string location = 103;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        103, this->location(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Panel_StatusControl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoBuf.Study.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string study_identifier = 102;
    if (has_study_identifier()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->study_identifier());
    }

    // optional string location = 103;
    if (has_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Panel_StatusControl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Panel_StatusControl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Panel_StatusControl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Panel_StatusControl::MergeFrom(const Panel_StatusControl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_study_identifier()) {
      set_study_identifier(from.study_identifier());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Panel_StatusControl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Panel_StatusControl::CopyFrom(const Panel_StatusControl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Panel_StatusControl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Panel_StatusControl::Swap(Panel_StatusControl* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(study_identifier_, other->study_identifier_);
    std::swap(location_, other->location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Panel_StatusControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Panel_StatusControl_descriptor_;
  metadata.reflection = Panel_StatusControl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Panel_VisibilityControl::kVisibilityFieldNumber;
const int Panel_VisibilityControl::kStudyIdentifierFieldNumber;
const int Panel_VisibilityControl::kLocationFieldNumber;
#endif  // !_MSC_VER

Panel_VisibilityControl::Panel_VisibilityControl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Panel_VisibilityControl::InitAsDefaultInstance() {
}

Panel_VisibilityControl::Panel_VisibilityControl(const Panel_VisibilityControl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Panel_VisibilityControl::SharedCtor() {
  _cached_size_ = 0;
  visibility_ = 1;
  study_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Panel_VisibilityControl::~Panel_VisibilityControl() {
  SharedDtor();
}

void Panel_VisibilityControl::SharedDtor() {
  if (study_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete study_identifier_;
  }
  if (location_ != &::google::protobuf::internal::kEmptyString) {
    delete location_;
  }
  if (this != default_instance_) {
  }
}

void Panel_VisibilityControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Panel_VisibilityControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Panel_VisibilityControl_descriptor_;
}

const Panel_VisibilityControl& Panel_VisibilityControl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yosokumo_2eproto();
  return *default_instance_;
}

Panel_VisibilityControl* Panel_VisibilityControl::default_instance_ = NULL;

Panel_VisibilityControl* Panel_VisibilityControl::New() const {
  return new Panel_VisibilityControl;
}

void Panel_VisibilityControl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    visibility_ = 1;
    if (has_study_identifier()) {
      if (study_identifier_ != &::google::protobuf::internal::kEmptyString) {
        study_identifier_->clear();
      }
    }
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::kEmptyString) {
        location_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Panel_VisibilityControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoBuf.Study.Visibility visibility = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoBuf::Study_Visibility_IsValid(value)) {
            set_visibility(static_cast< ::ProtoBuf::Study_Visibility >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_study_identifier;
        break;
      }

      // optional string study_identifier = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_study_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_study_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->study_identifier().data(), this->study_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_location;
        break;
      }

      // optional string location = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Panel_VisibilityControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoBuf.Study.Visibility visibility = 1;
  if (has_visibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->visibility(), output);
  }

  // optional string study_identifier = 102;
  if (has_study_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_identifier().data(), this->study_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      102, this->study_identifier(), output);
  }

  // optional string location = 103;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      103, this->location(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Panel_VisibilityControl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoBuf.Study.Visibility visibility = 1;
  if (has_visibility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->visibility(), target);
  }

  // optional string study_identifier = 102;
  if (has_study_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_identifier().data(), this->study_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->study_identifier(), target);
  }

  // optional string location = 103;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        103, this->location(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Panel_VisibilityControl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoBuf.Study.Visibility visibility = 1;
    if (has_visibility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->visibility());
    }

    // optional string study_identifier = 102;
    if (has_study_identifier()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->study_identifier());
    }

    // optional string location = 103;
    if (has_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Panel_VisibilityControl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Panel_VisibilityControl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Panel_VisibilityControl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Panel_VisibilityControl::MergeFrom(const Panel_VisibilityControl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_visibility()) {
      set_visibility(from.visibility());
    }
    if (from.has_study_identifier()) {
      set_study_identifier(from.study_identifier());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Panel_VisibilityControl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Panel_VisibilityControl::CopyFrom(const Panel_VisibilityControl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Panel_VisibilityControl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Panel_VisibilityControl::Swap(Panel_VisibilityControl* other) {
  if (other != this) {
    std::swap(visibility_, other->visibility_);
    std::swap(study_identifier_, other->study_identifier_);
    std::swap(location_, other->location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Panel_VisibilityControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Panel_VisibilityControl_descriptor_;
  metadata.reflection = Panel_VisibilityControl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Panel_BlockCountControl::kBlockCountFieldNumber;
const int Panel_BlockCountControl::kStudyIdentifierFieldNumber;
#endif  // !_MSC_VER

Panel_BlockCountControl::Panel_BlockCountControl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Panel_BlockCountControl::InitAsDefaultInstance() {
}

Panel_BlockCountControl::Panel_BlockCountControl(const Panel_BlockCountControl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Panel_BlockCountControl::SharedCtor() {
  _cached_size_ = 0;
  block_count_ = GOOGLE_ULONGLONG(0);
  study_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Panel_BlockCountControl::~Panel_BlockCountControl() {
  SharedDtor();
}

void Panel_BlockCountControl::SharedDtor() {
  if (study_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete study_identifier_;
  }
  if (this != default_instance_) {
  }
}

void Panel_BlockCountControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Panel_BlockCountControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Panel_BlockCountControl_descriptor_;
}

const Panel_BlockCountControl& Panel_BlockCountControl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yosokumo_2eproto();
  return *default_instance_;
}

Panel_BlockCountControl* Panel_BlockCountControl::default_instance_ = NULL;

Panel_BlockCountControl* Panel_BlockCountControl::New() const {
  return new Panel_BlockCountControl;
}

void Panel_BlockCountControl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    block_count_ = GOOGLE_ULONGLONG(0);
    if (has_study_identifier()) {
      if (study_identifier_ != &::google::protobuf::internal::kEmptyString) {
        study_identifier_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Panel_BlockCountControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 block_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &block_count_)));
          set_has_block_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_study_identifier;
        break;
      }

      // optional string study_identifier = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_study_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_study_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->study_identifier().data(), this->study_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Panel_BlockCountControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 block_count = 1;
  if (has_block_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->block_count(), output);
  }

  // optional string study_identifier = 102;
  if (has_study_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_identifier().data(), this->study_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      102, this->study_identifier(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Panel_BlockCountControl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 block_count = 1;
  if (has_block_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->block_count(), target);
  }

  // optional string study_identifier = 102;
  if (has_study_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_identifier().data(), this->study_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->study_identifier(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Panel_BlockCountControl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 block_count = 1;
    if (has_block_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->block_count());
    }

    // optional string study_identifier = 102;
    if (has_study_identifier()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->study_identifier());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Panel_BlockCountControl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Panel_BlockCountControl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Panel_BlockCountControl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Panel_BlockCountControl::MergeFrom(const Panel_BlockCountControl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block_count()) {
      set_block_count(from.block_count());
    }
    if (from.has_study_identifier()) {
      set_study_identifier(from.study_identifier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Panel_BlockCountControl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Panel_BlockCountControl::CopyFrom(const Panel_BlockCountControl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Panel_BlockCountControl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Panel_BlockCountControl::Swap(Panel_BlockCountControl* other) {
  if (other != this) {
    std::swap(block_count_, other->block_count_);
    std::swap(study_identifier_, other->study_identifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Panel_BlockCountControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Panel_BlockCountControl_descriptor_;
  metadata.reflection = Panel_BlockCountControl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Panel_CellCountControl::kCellCountFieldNumber;
const int Panel_CellCountControl::kStudyIdentifierFieldNumber;
#endif  // !_MSC_VER

Panel_CellCountControl::Panel_CellCountControl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Panel_CellCountControl::InitAsDefaultInstance() {
}

Panel_CellCountControl::Panel_CellCountControl(const Panel_CellCountControl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Panel_CellCountControl::SharedCtor() {
  _cached_size_ = 0;
  cell_count_ = GOOGLE_ULONGLONG(0);
  study_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Panel_CellCountControl::~Panel_CellCountControl() {
  SharedDtor();
}

void Panel_CellCountControl::SharedDtor() {
  if (study_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete study_identifier_;
  }
  if (this != default_instance_) {
  }
}

void Panel_CellCountControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Panel_CellCountControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Panel_CellCountControl_descriptor_;
}

const Panel_CellCountControl& Panel_CellCountControl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yosokumo_2eproto();
  return *default_instance_;
}

Panel_CellCountControl* Panel_CellCountControl::default_instance_ = NULL;

Panel_CellCountControl* Panel_CellCountControl::New() const {
  return new Panel_CellCountControl;
}

void Panel_CellCountControl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cell_count_ = GOOGLE_ULONGLONG(0);
    if (has_study_identifier()) {
      if (study_identifier_ != &::google::protobuf::internal::kEmptyString) {
        study_identifier_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Panel_CellCountControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cell_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cell_count_)));
          set_has_cell_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_study_identifier;
        break;
      }

      // optional string study_identifier = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_study_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_study_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->study_identifier().data(), this->study_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Panel_CellCountControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cell_count = 1;
  if (has_cell_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cell_count(), output);
  }

  // optional string study_identifier = 102;
  if (has_study_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_identifier().data(), this->study_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      102, this->study_identifier(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Panel_CellCountControl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cell_count = 1;
  if (has_cell_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cell_count(), target);
  }

  // optional string study_identifier = 102;
  if (has_study_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_identifier().data(), this->study_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->study_identifier(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Panel_CellCountControl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cell_count = 1;
    if (has_cell_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cell_count());
    }

    // optional string study_identifier = 102;
    if (has_study_identifier()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->study_identifier());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Panel_CellCountControl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Panel_CellCountControl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Panel_CellCountControl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Panel_CellCountControl::MergeFrom(const Panel_CellCountControl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cell_count()) {
      set_cell_count(from.cell_count());
    }
    if (from.has_study_identifier()) {
      set_study_identifier(from.study_identifier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Panel_CellCountControl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Panel_CellCountControl::CopyFrom(const Panel_CellCountControl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Panel_CellCountControl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Panel_CellCountControl::Swap(Panel_CellCountControl* other) {
  if (other != this) {
    std::swap(cell_count_, other->cell_count_);
    std::swap(study_identifier_, other->study_identifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Panel_CellCountControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Panel_CellCountControl_descriptor_;
  metadata.reflection = Panel_CellCountControl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Panel_ProspectCountControl::kProspectCountFieldNumber;
const int Panel_ProspectCountControl::kStudyIdentifierFieldNumber;
#endif  // !_MSC_VER

Panel_ProspectCountControl::Panel_ProspectCountControl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Panel_ProspectCountControl::InitAsDefaultInstance() {
}

Panel_ProspectCountControl::Panel_ProspectCountControl(const Panel_ProspectCountControl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Panel_ProspectCountControl::SharedCtor() {
  _cached_size_ = 0;
  prospect_count_ = GOOGLE_ULONGLONG(0);
  study_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Panel_ProspectCountControl::~Panel_ProspectCountControl() {
  SharedDtor();
}

void Panel_ProspectCountControl::SharedDtor() {
  if (study_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete study_identifier_;
  }
  if (this != default_instance_) {
  }
}

void Panel_ProspectCountControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Panel_ProspectCountControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Panel_ProspectCountControl_descriptor_;
}

const Panel_ProspectCountControl& Panel_ProspectCountControl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yosokumo_2eproto();
  return *default_instance_;
}

Panel_ProspectCountControl* Panel_ProspectCountControl::default_instance_ = NULL;

Panel_ProspectCountControl* Panel_ProspectCountControl::New() const {
  return new Panel_ProspectCountControl;
}

void Panel_ProspectCountControl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prospect_count_ = GOOGLE_ULONGLONG(0);
    if (has_study_identifier()) {
      if (study_identifier_ != &::google::protobuf::internal::kEmptyString) {
        study_identifier_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Panel_ProspectCountControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 prospect_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prospect_count_)));
          set_has_prospect_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_study_identifier;
        break;
      }

      // optional string study_identifier = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_study_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_study_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->study_identifier().data(), this->study_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Panel_ProspectCountControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 prospect_count = 1;
  if (has_prospect_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->prospect_count(), output);
  }

  // optional string study_identifier = 102;
  if (has_study_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_identifier().data(), this->study_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      102, this->study_identifier(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Panel_ProspectCountControl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 prospect_count = 1;
  if (has_prospect_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->prospect_count(), target);
  }

  // optional string study_identifier = 102;
  if (has_study_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_identifier().data(), this->study_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->study_identifier(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Panel_ProspectCountControl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 prospect_count = 1;
    if (has_prospect_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->prospect_count());
    }

    // optional string study_identifier = 102;
    if (has_study_identifier()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->study_identifier());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Panel_ProspectCountControl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Panel_ProspectCountControl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Panel_ProspectCountControl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Panel_ProspectCountControl::MergeFrom(const Panel_ProspectCountControl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prospect_count()) {
      set_prospect_count(from.prospect_count());
    }
    if (from.has_study_identifier()) {
      set_study_identifier(from.study_identifier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Panel_ProspectCountControl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Panel_ProspectCountControl::CopyFrom(const Panel_ProspectCountControl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Panel_ProspectCountControl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Panel_ProspectCountControl::Swap(Panel_ProspectCountControl* other) {
  if (other != this) {
    std::swap(prospect_count_, other->prospect_count_);
    std::swap(study_identifier_, other->study_identifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Panel_ProspectCountControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Panel_ProspectCountControl_descriptor_;
  metadata.reflection = Panel_ProspectCountControl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Panel_CreationTimeControl::kCreationTimeFieldNumber;
const int Panel_CreationTimeControl::kStudyIdentifierFieldNumber;
#endif  // !_MSC_VER

Panel_CreationTimeControl::Panel_CreationTimeControl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Panel_CreationTimeControl::InitAsDefaultInstance() {
}

Panel_CreationTimeControl::Panel_CreationTimeControl(const Panel_CreationTimeControl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Panel_CreationTimeControl::SharedCtor() {
  _cached_size_ = 0;
  creation_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  study_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Panel_CreationTimeControl::~Panel_CreationTimeControl() {
  SharedDtor();
}

void Panel_CreationTimeControl::SharedDtor() {
  if (creation_time_ != &::google::protobuf::internal::kEmptyString) {
    delete creation_time_;
  }
  if (study_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete study_identifier_;
  }
  if (this != default_instance_) {
  }
}

void Panel_CreationTimeControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Panel_CreationTimeControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Panel_CreationTimeControl_descriptor_;
}

const Panel_CreationTimeControl& Panel_CreationTimeControl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yosokumo_2eproto();
  return *default_instance_;
}

Panel_CreationTimeControl* Panel_CreationTimeControl::default_instance_ = NULL;

Panel_CreationTimeControl* Panel_CreationTimeControl::New() const {
  return new Panel_CreationTimeControl;
}

void Panel_CreationTimeControl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_creation_time()) {
      if (creation_time_ != &::google::protobuf::internal::kEmptyString) {
        creation_time_->clear();
      }
    }
    if (has_study_identifier()) {
      if (study_identifier_ != &::google::protobuf::internal::kEmptyString) {
        study_identifier_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Panel_CreationTimeControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string creation_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creation_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creation_time().data(), this->creation_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_study_identifier;
        break;
      }

      // optional string study_identifier = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_study_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_study_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->study_identifier().data(), this->study_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Panel_CreationTimeControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string creation_time = 1;
  if (has_creation_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creation_time().data(), this->creation_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->creation_time(), output);
  }

  // optional string study_identifier = 102;
  if (has_study_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_identifier().data(), this->study_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      102, this->study_identifier(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Panel_CreationTimeControl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string creation_time = 1;
  if (has_creation_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creation_time().data(), this->creation_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->creation_time(), target);
  }

  // optional string study_identifier = 102;
  if (has_study_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_identifier().data(), this->study_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->study_identifier(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Panel_CreationTimeControl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string creation_time = 1;
    if (has_creation_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creation_time());
    }

    // optional string study_identifier = 102;
    if (has_study_identifier()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->study_identifier());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Panel_CreationTimeControl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Panel_CreationTimeControl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Panel_CreationTimeControl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Panel_CreationTimeControl::MergeFrom(const Panel_CreationTimeControl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creation_time()) {
      set_creation_time(from.creation_time());
    }
    if (from.has_study_identifier()) {
      set_study_identifier(from.study_identifier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Panel_CreationTimeControl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Panel_CreationTimeControl::CopyFrom(const Panel_CreationTimeControl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Panel_CreationTimeControl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Panel_CreationTimeControl::Swap(Panel_CreationTimeControl* other) {
  if (other != this) {
    std::swap(creation_time_, other->creation_time_);
    std::swap(study_identifier_, other->study_identifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Panel_CreationTimeControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Panel_CreationTimeControl_descriptor_;
  metadata.reflection = Panel_CreationTimeControl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Panel_LatestBlockTimeControl::kLatestBlockTimeFieldNumber;
const int Panel_LatestBlockTimeControl::kStudyIdentifierFieldNumber;
#endif  // !_MSC_VER

Panel_LatestBlockTimeControl::Panel_LatestBlockTimeControl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Panel_LatestBlockTimeControl::InitAsDefaultInstance() {
}

Panel_LatestBlockTimeControl::Panel_LatestBlockTimeControl(const Panel_LatestBlockTimeControl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Panel_LatestBlockTimeControl::SharedCtor() {
  _cached_size_ = 0;
  latest_block_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  study_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Panel_LatestBlockTimeControl::~Panel_LatestBlockTimeControl() {
  SharedDtor();
}

void Panel_LatestBlockTimeControl::SharedDtor() {
  if (latest_block_time_ != &::google::protobuf::internal::kEmptyString) {
    delete latest_block_time_;
  }
  if (study_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete study_identifier_;
  }
  if (this != default_instance_) {
  }
}

void Panel_LatestBlockTimeControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Panel_LatestBlockTimeControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Panel_LatestBlockTimeControl_descriptor_;
}

const Panel_LatestBlockTimeControl& Panel_LatestBlockTimeControl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yosokumo_2eproto();
  return *default_instance_;
}

Panel_LatestBlockTimeControl* Panel_LatestBlockTimeControl::default_instance_ = NULL;

Panel_LatestBlockTimeControl* Panel_LatestBlockTimeControl::New() const {
  return new Panel_LatestBlockTimeControl;
}

void Panel_LatestBlockTimeControl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_latest_block_time()) {
      if (latest_block_time_ != &::google::protobuf::internal::kEmptyString) {
        latest_block_time_->clear();
      }
    }
    if (has_study_identifier()) {
      if (study_identifier_ != &::google::protobuf::internal::kEmptyString) {
        study_identifier_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Panel_LatestBlockTimeControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string latest_block_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latest_block_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->latest_block_time().data(), this->latest_block_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_study_identifier;
        break;
      }

      // optional string study_identifier = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_study_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_study_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->study_identifier().data(), this->study_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Panel_LatestBlockTimeControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string latest_block_time = 1;
  if (has_latest_block_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->latest_block_time().data(), this->latest_block_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->latest_block_time(), output);
  }

  // optional string study_identifier = 102;
  if (has_study_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_identifier().data(), this->study_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      102, this->study_identifier(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Panel_LatestBlockTimeControl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string latest_block_time = 1;
  if (has_latest_block_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->latest_block_time().data(), this->latest_block_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->latest_block_time(), target);
  }

  // optional string study_identifier = 102;
  if (has_study_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_identifier().data(), this->study_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->study_identifier(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Panel_LatestBlockTimeControl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string latest_block_time = 1;
    if (has_latest_block_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->latest_block_time());
    }

    // optional string study_identifier = 102;
    if (has_study_identifier()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->study_identifier());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Panel_LatestBlockTimeControl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Panel_LatestBlockTimeControl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Panel_LatestBlockTimeControl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Panel_LatestBlockTimeControl::MergeFrom(const Panel_LatestBlockTimeControl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latest_block_time()) {
      set_latest_block_time(from.latest_block_time());
    }
    if (from.has_study_identifier()) {
      set_study_identifier(from.study_identifier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Panel_LatestBlockTimeControl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Panel_LatestBlockTimeControl::CopyFrom(const Panel_LatestBlockTimeControl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Panel_LatestBlockTimeControl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Panel_LatestBlockTimeControl::Swap(Panel_LatestBlockTimeControl* other) {
  if (other != this) {
    std::swap(latest_block_time_, other->latest_block_time_);
    std::swap(study_identifier_, other->study_identifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Panel_LatestBlockTimeControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Panel_LatestBlockTimeControl_descriptor_;
  metadata.reflection = Panel_LatestBlockTimeControl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Panel_LatestProspectTimeControl::kLatestProspectTimeFieldNumber;
const int Panel_LatestProspectTimeControl::kStudyIdentifierFieldNumber;
#endif  // !_MSC_VER

Panel_LatestProspectTimeControl::Panel_LatestProspectTimeControl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Panel_LatestProspectTimeControl::InitAsDefaultInstance() {
}

Panel_LatestProspectTimeControl::Panel_LatestProspectTimeControl(const Panel_LatestProspectTimeControl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Panel_LatestProspectTimeControl::SharedCtor() {
  _cached_size_ = 0;
  latest_prospect_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  study_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Panel_LatestProspectTimeControl::~Panel_LatestProspectTimeControl() {
  SharedDtor();
}

void Panel_LatestProspectTimeControl::SharedDtor() {
  if (latest_prospect_time_ != &::google::protobuf::internal::kEmptyString) {
    delete latest_prospect_time_;
  }
  if (study_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete study_identifier_;
  }
  if (this != default_instance_) {
  }
}

void Panel_LatestProspectTimeControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Panel_LatestProspectTimeControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Panel_LatestProspectTimeControl_descriptor_;
}

const Panel_LatestProspectTimeControl& Panel_LatestProspectTimeControl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yosokumo_2eproto();
  return *default_instance_;
}

Panel_LatestProspectTimeControl* Panel_LatestProspectTimeControl::default_instance_ = NULL;

Panel_LatestProspectTimeControl* Panel_LatestProspectTimeControl::New() const {
  return new Panel_LatestProspectTimeControl;
}

void Panel_LatestProspectTimeControl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_latest_prospect_time()) {
      if (latest_prospect_time_ != &::google::protobuf::internal::kEmptyString) {
        latest_prospect_time_->clear();
      }
    }
    if (has_study_identifier()) {
      if (study_identifier_ != &::google::protobuf::internal::kEmptyString) {
        study_identifier_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Panel_LatestProspectTimeControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string latest_prospect_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latest_prospect_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->latest_prospect_time().data(), this->latest_prospect_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_study_identifier;
        break;
      }

      // optional string study_identifier = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_study_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_study_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->study_identifier().data(), this->study_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Panel_LatestProspectTimeControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string latest_prospect_time = 1;
  if (has_latest_prospect_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->latest_prospect_time().data(), this->latest_prospect_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->latest_prospect_time(), output);
  }

  // optional string study_identifier = 102;
  if (has_study_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_identifier().data(), this->study_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      102, this->study_identifier(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Panel_LatestProspectTimeControl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string latest_prospect_time = 1;
  if (has_latest_prospect_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->latest_prospect_time().data(), this->latest_prospect_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->latest_prospect_time(), target);
  }

  // optional string study_identifier = 102;
  if (has_study_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_identifier().data(), this->study_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->study_identifier(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Panel_LatestProspectTimeControl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string latest_prospect_time = 1;
    if (has_latest_prospect_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->latest_prospect_time());
    }

    // optional string study_identifier = 102;
    if (has_study_identifier()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->study_identifier());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Panel_LatestProspectTimeControl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Panel_LatestProspectTimeControl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Panel_LatestProspectTimeControl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Panel_LatestProspectTimeControl::MergeFrom(const Panel_LatestProspectTimeControl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latest_prospect_time()) {
      set_latest_prospect_time(from.latest_prospect_time());
    }
    if (from.has_study_identifier()) {
      set_study_identifier(from.study_identifier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Panel_LatestProspectTimeControl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Panel_LatestProspectTimeControl::CopyFrom(const Panel_LatestProspectTimeControl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Panel_LatestProspectTimeControl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Panel_LatestProspectTimeControl::Swap(Panel_LatestProspectTimeControl* other) {
  if (other != this) {
    std::swap(latest_prospect_time_, other->latest_prospect_time_);
    std::swap(study_identifier_, other->study_identifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Panel_LatestProspectTimeControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Panel_LatestProspectTimeControl_descriptor_;
  metadata.reflection = Panel_LatestProspectTimeControl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Panel::kStudyIdentifierFieldNumber;
const int Panel::kLocationFieldNumber;
const int Panel::kStudyNameControlFieldNumber;
const int Panel::kTypeControlFieldNumber;
const int Panel::kStatusControlFieldNumber;
const int Panel::kVisibilityControlFieldNumber;
const int Panel::kBlockCountControlFieldNumber;
const int Panel::kCellCountControlFieldNumber;
const int Panel::kProspectCountControlFieldNumber;
const int Panel::kCreationTimeControlFieldNumber;
const int Panel::kLatestBlockTimeControlFieldNumber;
const int Panel::kLatestProspectTimeControlFieldNumber;
#endif  // !_MSC_VER

Panel::Panel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Panel::InitAsDefaultInstance() {
  study_name_control_ = const_cast< ::ProtoBuf::Panel_StudyNameControl*>(&::ProtoBuf::Panel_StudyNameControl::default_instance());
  type_control_ = const_cast< ::ProtoBuf::Panel_TypeControl*>(&::ProtoBuf::Panel_TypeControl::default_instance());
  status_control_ = const_cast< ::ProtoBuf::Panel_StatusControl*>(&::ProtoBuf::Panel_StatusControl::default_instance());
  visibility_control_ = const_cast< ::ProtoBuf::Panel_VisibilityControl*>(&::ProtoBuf::Panel_VisibilityControl::default_instance());
  block_count_control_ = const_cast< ::ProtoBuf::Panel_BlockCountControl*>(&::ProtoBuf::Panel_BlockCountControl::default_instance());
  cell_count_control_ = const_cast< ::ProtoBuf::Panel_CellCountControl*>(&::ProtoBuf::Panel_CellCountControl::default_instance());
  prospect_count_control_ = const_cast< ::ProtoBuf::Panel_ProspectCountControl*>(&::ProtoBuf::Panel_ProspectCountControl::default_instance());
  creation_time_control_ = const_cast< ::ProtoBuf::Panel_CreationTimeControl*>(&::ProtoBuf::Panel_CreationTimeControl::default_instance());
  latest_block_time_control_ = const_cast< ::ProtoBuf::Panel_LatestBlockTimeControl*>(&::ProtoBuf::Panel_LatestBlockTimeControl::default_instance());
  latest_prospect_time_control_ = const_cast< ::ProtoBuf::Panel_LatestProspectTimeControl*>(&::ProtoBuf::Panel_LatestProspectTimeControl::default_instance());
}

Panel::Panel(const Panel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Panel::SharedCtor() {
  _cached_size_ = 0;
  study_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  study_name_control_ = NULL;
  type_control_ = NULL;
  status_control_ = NULL;
  visibility_control_ = NULL;
  block_count_control_ = NULL;
  cell_count_control_ = NULL;
  prospect_count_control_ = NULL;
  creation_time_control_ = NULL;
  latest_block_time_control_ = NULL;
  latest_prospect_time_control_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Panel::~Panel() {
  SharedDtor();
}

void Panel::SharedDtor() {
  if (study_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete study_identifier_;
  }
  if (location_ != &::google::protobuf::internal::kEmptyString) {
    delete location_;
  }
  if (this != default_instance_) {
    delete study_name_control_;
    delete type_control_;
    delete status_control_;
    delete visibility_control_;
    delete block_count_control_;
    delete cell_count_control_;
    delete prospect_count_control_;
    delete creation_time_control_;
    delete latest_block_time_control_;
    delete latest_prospect_time_control_;
  }
}

void Panel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Panel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Panel_descriptor_;
}

const Panel& Panel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yosokumo_2eproto();
  return *default_instance_;
}

Panel* Panel::default_instance_ = NULL;

Panel* Panel::New() const {
  return new Panel;
}

void Panel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_study_identifier()) {
      if (study_identifier_ != &::google::protobuf::internal::kEmptyString) {
        study_identifier_->clear();
      }
    }
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::kEmptyString) {
        location_->clear();
      }
    }
    if (has_study_name_control()) {
      if (study_name_control_ != NULL) study_name_control_->::ProtoBuf::Panel_StudyNameControl::Clear();
    }
    if (has_type_control()) {
      if (type_control_ != NULL) type_control_->::ProtoBuf::Panel_TypeControl::Clear();
    }
    if (has_status_control()) {
      if (status_control_ != NULL) status_control_->::ProtoBuf::Panel_StatusControl::Clear();
    }
    if (has_visibility_control()) {
      if (visibility_control_ != NULL) visibility_control_->::ProtoBuf::Panel_VisibilityControl::Clear();
    }
    if (has_block_count_control()) {
      if (block_count_control_ != NULL) block_count_control_->::ProtoBuf::Panel_BlockCountControl::Clear();
    }
    if (has_cell_count_control()) {
      if (cell_count_control_ != NULL) cell_count_control_->::ProtoBuf::Panel_CellCountControl::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_prospect_count_control()) {
      if (prospect_count_control_ != NULL) prospect_count_control_->::ProtoBuf::Panel_ProspectCountControl::Clear();
    }
    if (has_creation_time_control()) {
      if (creation_time_control_ != NULL) creation_time_control_->::ProtoBuf::Panel_CreationTimeControl::Clear();
    }
    if (has_latest_block_time_control()) {
      if (latest_block_time_control_ != NULL) latest_block_time_control_->::ProtoBuf::Panel_LatestBlockTimeControl::Clear();
    }
    if (has_latest_prospect_time_control()) {
      if (latest_prospect_time_control_ != NULL) latest_prospect_time_control_->::ProtoBuf::Panel_LatestProspectTimeControl::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Panel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string study_identifier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_study_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->study_identifier().data(), this->study_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_location;
        break;
      }

      // optional string location = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_study_name_control;
        break;
      }

      // optional .ProtoBuf.Panel.StudyNameControl study_name_control = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_study_name_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_study_name_control()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(834)) goto parse_type_control;
        break;
      }

      // optional .ProtoBuf.Panel.TypeControl type_control = 104;
      case 104: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_type_control()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(842)) goto parse_status_control;
        break;
      }

      // optional .ProtoBuf.Panel.StatusControl status_control = 105;
      case 105: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status_control()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(850)) goto parse_visibility_control;
        break;
      }

      // optional .ProtoBuf.Panel.VisibilityControl visibility_control = 106;
      case 106: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_visibility_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_visibility_control()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(858)) goto parse_block_count_control;
        break;
      }

      // optional .ProtoBuf.Panel.BlockCountControl block_count_control = 107;
      case 107: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_count_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block_count_control()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(866)) goto parse_cell_count_control;
        break;
      }

      // optional .ProtoBuf.Panel.CellCountControl cell_count_control = 108;
      case 108: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_count_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell_count_control()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(874)) goto parse_prospect_count_control;
        break;
      }

      // optional .ProtoBuf.Panel.ProspectCountControl prospect_count_control = 109;
      case 109: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prospect_count_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prospect_count_control()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(882)) goto parse_creation_time_control;
        break;
      }

      // optional .ProtoBuf.Panel.CreationTimeControl creation_time_control = 110;
      case 110: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creation_time_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creation_time_control()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(890)) goto parse_latest_block_time_control;
        break;
      }

      // optional .ProtoBuf.Panel.LatestBlockTimeControl latest_block_time_control = 111;
      case 111: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_latest_block_time_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_latest_block_time_control()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(898)) goto parse_latest_prospect_time_control;
        break;
      }

      // optional .ProtoBuf.Panel.LatestProspectTimeControl latest_prospect_time_control = 112;
      case 112: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_latest_prospect_time_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_latest_prospect_time_control()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Panel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string study_identifier = 1;
  if (has_study_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_identifier().data(), this->study_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->study_identifier(), output);
  }

  // optional string location = 102;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      102, this->location(), output);
  }

  // optional .ProtoBuf.Panel.StudyNameControl study_name_control = 103;
  if (has_study_name_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->study_name_control(), output);
  }

  // optional .ProtoBuf.Panel.TypeControl type_control = 104;
  if (has_type_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, this->type_control(), output);
  }

  // optional .ProtoBuf.Panel.StatusControl status_control = 105;
  if (has_status_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, this->status_control(), output);
  }

  // optional .ProtoBuf.Panel.VisibilityControl visibility_control = 106;
  if (has_visibility_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, this->visibility_control(), output);
  }

  // optional .ProtoBuf.Panel.BlockCountControl block_count_control = 107;
  if (has_block_count_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107, this->block_count_control(), output);
  }

  // optional .ProtoBuf.Panel.CellCountControl cell_count_control = 108;
  if (has_cell_count_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      108, this->cell_count_control(), output);
  }

  // optional .ProtoBuf.Panel.ProspectCountControl prospect_count_control = 109;
  if (has_prospect_count_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      109, this->prospect_count_control(), output);
  }

  // optional .ProtoBuf.Panel.CreationTimeControl creation_time_control = 110;
  if (has_creation_time_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      110, this->creation_time_control(), output);
  }

  // optional .ProtoBuf.Panel.LatestBlockTimeControl latest_block_time_control = 111;
  if (has_latest_block_time_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      111, this->latest_block_time_control(), output);
  }

  // optional .ProtoBuf.Panel.LatestProspectTimeControl latest_prospect_time_control = 112;
  if (has_latest_prospect_time_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      112, this->latest_prospect_time_control(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Panel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string study_identifier = 1;
  if (has_study_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_identifier().data(), this->study_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->study_identifier(), target);
  }

  // optional string location = 102;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->location(), target);
  }

  // optional .ProtoBuf.Panel.StudyNameControl study_name_control = 103;
  if (has_study_name_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->study_name_control(), target);
  }

  // optional .ProtoBuf.Panel.TypeControl type_control = 104;
  if (has_type_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        104, this->type_control(), target);
  }

  // optional .ProtoBuf.Panel.StatusControl status_control = 105;
  if (has_status_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        105, this->status_control(), target);
  }

  // optional .ProtoBuf.Panel.VisibilityControl visibility_control = 106;
  if (has_visibility_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        106, this->visibility_control(), target);
  }

  // optional .ProtoBuf.Panel.BlockCountControl block_count_control = 107;
  if (has_block_count_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        107, this->block_count_control(), target);
  }

  // optional .ProtoBuf.Panel.CellCountControl cell_count_control = 108;
  if (has_cell_count_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        108, this->cell_count_control(), target);
  }

  // optional .ProtoBuf.Panel.ProspectCountControl prospect_count_control = 109;
  if (has_prospect_count_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        109, this->prospect_count_control(), target);
  }

  // optional .ProtoBuf.Panel.CreationTimeControl creation_time_control = 110;
  if (has_creation_time_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        110, this->creation_time_control(), target);
  }

  // optional .ProtoBuf.Panel.LatestBlockTimeControl latest_block_time_control = 111;
  if (has_latest_block_time_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        111, this->latest_block_time_control(), target);
  }

  // optional .ProtoBuf.Panel.LatestProspectTimeControl latest_prospect_time_control = 112;
  if (has_latest_prospect_time_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        112, this->latest_prospect_time_control(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Panel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string study_identifier = 1;
    if (has_study_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->study_identifier());
    }

    // optional string location = 102;
    if (has_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

    // optional .ProtoBuf.Panel.StudyNameControl study_name_control = 103;
    if (has_study_name_control()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->study_name_control());
    }

    // optional .ProtoBuf.Panel.TypeControl type_control = 104;
    if (has_type_control()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->type_control());
    }

    // optional .ProtoBuf.Panel.StatusControl status_control = 105;
    if (has_status_control()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status_control());
    }

    // optional .ProtoBuf.Panel.VisibilityControl visibility_control = 106;
    if (has_visibility_control()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->visibility_control());
    }

    // optional .ProtoBuf.Panel.BlockCountControl block_count_control = 107;
    if (has_block_count_control()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block_count_control());
    }

    // optional .ProtoBuf.Panel.CellCountControl cell_count_control = 108;
    if (has_cell_count_control()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cell_count_control());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .ProtoBuf.Panel.ProspectCountControl prospect_count_control = 109;
    if (has_prospect_count_control()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prospect_count_control());
    }

    // optional .ProtoBuf.Panel.CreationTimeControl creation_time_control = 110;
    if (has_creation_time_control()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->creation_time_control());
    }

    // optional .ProtoBuf.Panel.LatestBlockTimeControl latest_block_time_control = 111;
    if (has_latest_block_time_control()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->latest_block_time_control());
    }

    // optional .ProtoBuf.Panel.LatestProspectTimeControl latest_prospect_time_control = 112;
    if (has_latest_prospect_time_control()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->latest_prospect_time_control());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Panel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Panel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Panel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Panel::MergeFrom(const Panel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_study_identifier()) {
      set_study_identifier(from.study_identifier());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_study_name_control()) {
      mutable_study_name_control()->::ProtoBuf::Panel_StudyNameControl::MergeFrom(from.study_name_control());
    }
    if (from.has_type_control()) {
      mutable_type_control()->::ProtoBuf::Panel_TypeControl::MergeFrom(from.type_control());
    }
    if (from.has_status_control()) {
      mutable_status_control()->::ProtoBuf::Panel_StatusControl::MergeFrom(from.status_control());
    }
    if (from.has_visibility_control()) {
      mutable_visibility_control()->::ProtoBuf::Panel_VisibilityControl::MergeFrom(from.visibility_control());
    }
    if (from.has_block_count_control()) {
      mutable_block_count_control()->::ProtoBuf::Panel_BlockCountControl::MergeFrom(from.block_count_control());
    }
    if (from.has_cell_count_control()) {
      mutable_cell_count_control()->::ProtoBuf::Panel_CellCountControl::MergeFrom(from.cell_count_control());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_prospect_count_control()) {
      mutable_prospect_count_control()->::ProtoBuf::Panel_ProspectCountControl::MergeFrom(from.prospect_count_control());
    }
    if (from.has_creation_time_control()) {
      mutable_creation_time_control()->::ProtoBuf::Panel_CreationTimeControl::MergeFrom(from.creation_time_control());
    }
    if (from.has_latest_block_time_control()) {
      mutable_latest_block_time_control()->::ProtoBuf::Panel_LatestBlockTimeControl::MergeFrom(from.latest_block_time_control());
    }
    if (from.has_latest_prospect_time_control()) {
      mutable_latest_prospect_time_control()->::ProtoBuf::Panel_LatestProspectTimeControl::MergeFrom(from.latest_prospect_time_control());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Panel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Panel::CopyFrom(const Panel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Panel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_study_name_control()) {
    if (!this->study_name_control().IsInitialized()) return false;
  }
  if (has_type_control()) {
    if (!this->type_control().IsInitialized()) return false;
  }
  if (has_status_control()) {
    if (!this->status_control().IsInitialized()) return false;
  }
  if (has_visibility_control()) {
    if (!this->visibility_control().IsInitialized()) return false;
  }
  if (has_block_count_control()) {
    if (!this->block_count_control().IsInitialized()) return false;
  }
  if (has_cell_count_control()) {
    if (!this->cell_count_control().IsInitialized()) return false;
  }
  if (has_prospect_count_control()) {
    if (!this->prospect_count_control().IsInitialized()) return false;
  }
  if (has_creation_time_control()) {
    if (!this->creation_time_control().IsInitialized()) return false;
  }
  if (has_latest_block_time_control()) {
    if (!this->latest_block_time_control().IsInitialized()) return false;
  }
  if (has_latest_prospect_time_control()) {
    if (!this->latest_prospect_time_control().IsInitialized()) return false;
  }
  return true;
}

void Panel::Swap(Panel* other) {
  if (other != this) {
    std::swap(study_identifier_, other->study_identifier_);
    std::swap(location_, other->location_);
    std::swap(study_name_control_, other->study_name_control_);
    std::swap(type_control_, other->type_control_);
    std::swap(status_control_, other->status_control_);
    std::swap(visibility_control_, other->visibility_control_);
    std::swap(block_count_control_, other->block_count_control_);
    std::swap(cell_count_control_, other->cell_count_control_);
    std::swap(prospect_count_control_, other->prospect_count_control_);
    std::swap(creation_time_control_, other->creation_time_control_);
    std::swap(latest_block_time_control_, other->latest_block_time_control_);
    std::swap(latest_prospect_time_control_, other->latest_prospect_time_control_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Panel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Panel_descriptor_;
  metadata.reflection = Panel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Block::kStudyIdentifierFieldNumber;
const int Block::kEmptyFieldNumber;
const int Block::kPredictorFieldNumber;
const int Block::kSpecimenFieldNumber;
#endif  // !_MSC_VER

Block::Block()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Block::InitAsDefaultInstance() {
}

Block::Block(const Block& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Block::SharedCtor() {
  _cached_size_ = 0;
  study_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  empty_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Block::~Block() {
  SharedDtor();
}

void Block::SharedDtor() {
  if (study_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete study_identifier_;
  }
  if (this != default_instance_) {
  }
}

void Block::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Block::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Block_descriptor_;
}

const Block& Block::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yosokumo_2eproto();
  return *default_instance_;
}

Block* Block::default_instance_ = NULL;

Block* Block::New() const {
  return new Block;
}

void Block::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_study_identifier()) {
      if (study_identifier_ != &::google::protobuf::internal::kEmptyString) {
        study_identifier_->clear();
      }
    }
    empty_ = true;
  }
  predictor_.Clear();
  specimen_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Block::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string study_identifier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_study_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->study_identifier().data(), this->study_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_empty;
        break;
      }

      // optional bool empty = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_empty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &empty_)));
          set_has_empty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_predictor;
        break;
      }

      // repeated .ProtoBuf.Predictor predictor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_predictor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_predictor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_predictor;
        if (input->ExpectTag(34)) goto parse_specimen;
        break;
      }

      // repeated .ProtoBuf.Specimen specimen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_specimen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_specimen()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_specimen;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Block::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string study_identifier = 1;
  if (has_study_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_identifier().data(), this->study_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->study_identifier(), output);
  }

  // optional bool empty = 2 [default = true];
  if (has_empty()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->empty(), output);
  }

  // repeated .ProtoBuf.Predictor predictor = 3;
  for (int i = 0; i < this->predictor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->predictor(i), output);
  }

  // repeated .ProtoBuf.Specimen specimen = 4;
  for (int i = 0; i < this->specimen_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->specimen(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Block::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string study_identifier = 1;
  if (has_study_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->study_identifier().data(), this->study_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->study_identifier(), target);
  }

  // optional bool empty = 2 [default = true];
  if (has_empty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->empty(), target);
  }

  // repeated .ProtoBuf.Predictor predictor = 3;
  for (int i = 0; i < this->predictor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->predictor(i), target);
  }

  // repeated .ProtoBuf.Specimen specimen = 4;
  for (int i = 0; i < this->specimen_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->specimen(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Block::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string study_identifier = 1;
    if (has_study_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->study_identifier());
    }

    // optional bool empty = 2 [default = true];
    if (has_empty()) {
      total_size += 1 + 1;
    }

  }
  // repeated .ProtoBuf.Predictor predictor = 3;
  total_size += 1 * this->predictor_size();
  for (int i = 0; i < this->predictor_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->predictor(i));
  }

  // repeated .ProtoBuf.Specimen specimen = 4;
  total_size += 1 * this->specimen_size();
  for (int i = 0; i < this->specimen_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->specimen(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Block::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Block* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Block*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
  GOOGLE_CHECK_NE(&from, this);
  predictor_.MergeFrom(from.predictor_);
  specimen_.MergeFrom(from.specimen_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_study_identifier()) {
      set_study_identifier(from.study_identifier());
    }
    if (from.has_empty()) {
      set_empty(from.empty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Block::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {

  for (int i = 0; i < predictor_size(); i++) {
    if (!this->predictor(i).IsInitialized()) return false;
  }
  return true;
}

void Block::Swap(Block* other) {
  if (other != this) {
    std::swap(study_identifier_, other->study_identifier_);
    std::swap(empty_, other->empty_);
    predictor_.Swap(&other->predictor_);
    specimen_.Swap(&other->specimen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Block::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Block_descriptor_;
  metadata.reflection = Block_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Predictor_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Predictor_Status_descriptor_;
}
bool Predictor_Status_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Predictor_Status Predictor::Active;
const Predictor_Status Predictor::Inactive;
const Predictor_Status Predictor::Status_MIN;
const Predictor_Status Predictor::Status_MAX;
const int Predictor::Status_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Predictor_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Predictor_Type_descriptor_;
}
bool Predictor_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Predictor_Type Predictor::Categorical;
const Predictor_Type Predictor::Continuous;
const Predictor_Type Predictor::Type_MIN;
const Predictor_Type Predictor::Type_MAX;
const int Predictor::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Predictor_Level_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Predictor_Level_descriptor_;
}
bool Predictor_Level_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Predictor_Level Predictor::Nominal;
const Predictor_Level Predictor::Ordinal;
const Predictor_Level Predictor::Interval;
const Predictor_Level Predictor::Ratio;
const Predictor_Level Predictor::Level_MIN;
const Predictor_Level Predictor::Level_MAX;
const int Predictor::Level_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Predictor::kNameFieldNumber;
const int Predictor::kStatusFieldNumber;
const int Predictor::kTypeFieldNumber;
const int Predictor::kLevelFieldNumber;
const int Predictor::kCellFieldNumber;
#endif  // !_MSC_VER

Predictor::Predictor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Predictor::InitAsDefaultInstance() {
}

Predictor::Predictor(const Predictor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Predictor::SharedCtor() {
  _cached_size_ = 0;
  name_ = GOOGLE_ULONGLONG(0);
  status_ = 1;
  type_ = 1;
  level_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Predictor::~Predictor() {
  SharedDtor();
}

void Predictor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Predictor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Predictor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Predictor_descriptor_;
}

const Predictor& Predictor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yosokumo_2eproto();
  return *default_instance_;
}

Predictor* Predictor::default_instance_ = NULL;

Predictor* Predictor::New() const {
  return new Predictor;
}

void Predictor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    name_ = GOOGLE_ULONGLONG(0);
    status_ = 1;
    type_ = 1;
    level_ = 1;
  }
  cell_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Predictor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &name_)));
          set_has_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .ProtoBuf.Predictor.Status status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoBuf::Predictor_Status_IsValid(value)) {
            set_status(static_cast< ::ProtoBuf::Predictor_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .ProtoBuf.Predictor.Type type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoBuf::Predictor_Type_IsValid(value)) {
            set_type(static_cast< ::ProtoBuf::Predictor_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional .ProtoBuf.Predictor.Level level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoBuf::Predictor_Level_IsValid(value)) {
            set_level(static_cast< ::ProtoBuf::Predictor_Level >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cell;
        break;
      }

      // repeated .ProtoBuf.Cell cell = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cell;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Predictor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->name(), output);
  }

  // optional .ProtoBuf.Predictor.Status status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional .ProtoBuf.Predictor.Type type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .ProtoBuf.Predictor.Level level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->level(), output);
  }

  // repeated .ProtoBuf.Cell cell = 5;
  for (int i = 0; i < this->cell_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cell(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Predictor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 name = 1;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->name(), target);
  }

  // optional .ProtoBuf.Predictor.Status status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional .ProtoBuf.Predictor.Type type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .ProtoBuf.Predictor.Level level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->level(), target);
  }

  // repeated .ProtoBuf.Cell cell = 5;
  for (int i = 0; i < this->cell_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cell(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Predictor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->name());
    }

    // optional .ProtoBuf.Predictor.Status status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .ProtoBuf.Predictor.Type type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .ProtoBuf.Predictor.Level level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
    }

  }
  // repeated .ProtoBuf.Cell cell = 5;
  total_size += 1 * this->cell_size();
  for (int i = 0; i < this->cell_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cell(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Predictor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Predictor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Predictor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Predictor::MergeFrom(const Predictor& from) {
  GOOGLE_CHECK_NE(&from, this);
  cell_.MergeFrom(from.cell_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Predictor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Predictor::CopyFrom(const Predictor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Predictor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Predictor::Swap(Predictor* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(status_, other->status_);
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    cell_.Swap(&other->cell_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Predictor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Predictor_descriptor_;
  metadata.reflection = Predictor_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Specimen_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Specimen_Status_descriptor_;
}
bool Specimen_Status_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Specimen_Status Specimen::Active;
const Specimen_Status Specimen::Inactive;
const Specimen_Status Specimen::Status_MIN;
const Specimen_Status Specimen::Status_MAX;
const int Specimen::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Specimen::kKeyFieldNumber;
const int Specimen::kStatusFieldNumber;
const int Specimen::kWeightFieldNumber;
const int Specimen::kEmptyFieldNumber;
const int Specimen::kNaturalFieldNumber;
const int Specimen::kIntegerFieldNumber;
const int Specimen::kRealFieldNumber;
const int Specimen::kCellFieldNumber;
#endif  // !_MSC_VER

Specimen::Specimen()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Specimen::InitAsDefaultInstance() {
}

Specimen::Specimen(const Specimen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Specimen::SharedCtor() {
  _cached_size_ = 0;
  key_ = GOOGLE_ULONGLONG(0);
  status_ = 1;
  weight_ = GOOGLE_ULONGLONG(0);
  empty_ = true;
  natural_ = GOOGLE_ULONGLONG(0);
  integer_ = GOOGLE_LONGLONG(0);
  real_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Specimen::~Specimen() {
  SharedDtor();
}

void Specimen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Specimen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Specimen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Specimen_descriptor_;
}

const Specimen& Specimen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yosokumo_2eproto();
  return *default_instance_;
}

Specimen* Specimen::default_instance_ = NULL;

Specimen* Specimen::New() const {
  return new Specimen;
}

void Specimen::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = GOOGLE_ULONGLONG(0);
    status_ = 1;
    weight_ = GOOGLE_ULONGLONG(0);
    empty_ = true;
    natural_ = GOOGLE_ULONGLONG(0);
    integer_ = GOOGLE_LONGLONG(0);
    real_ = 0;
  }
  cell_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Specimen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .ProtoBuf.Specimen.Status status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoBuf::Specimen_Status_IsValid(value)) {
            set_status(static_cast< ::ProtoBuf::Specimen_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_weight;
        break;
      }

      // optional uint64 weight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_empty;
        break;
      }

      // optional bool empty = 4 [default = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_empty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &empty_)));
          set_has_empty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_natural;
        break;
      }

      // optional uint64 natural = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_natural:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &natural_)));
          set_has_natural();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_integer;
        break;
      }

      // optional sint64 integer = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_integer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &integer_)));
          set_has_integer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_real;
        break;
      }

      // optional double real = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_real:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &real_)));
          set_has_real();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_cell;
        break;
      }

      // repeated .ProtoBuf.Cell cell = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_cell;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Specimen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->key(), output);
  }

  // optional .ProtoBuf.Specimen.Status status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional uint64 weight = 3;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->weight(), output);
  }

  // optional bool empty = 4 [default = true];
  if (has_empty()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->empty(), output);
  }

  // optional uint64 natural = 5;
  if (has_natural()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->natural(), output);
  }

  // optional sint64 integer = 6;
  if (has_integer()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->integer(), output);
  }

  // optional double real = 7;
  if (has_real()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->real(), output);
  }

  // repeated .ProtoBuf.Cell cell = 8;
  for (int i = 0; i < this->cell_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->cell(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Specimen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->key(), target);
  }

  // optional .ProtoBuf.Specimen.Status status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional uint64 weight = 3;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->weight(), target);
  }

  // optional bool empty = 4 [default = true];
  if (has_empty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->empty(), target);
  }

  // optional uint64 natural = 5;
  if (has_natural()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->natural(), target);
  }

  // optional sint64 integer = 6;
  if (has_integer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(6, this->integer(), target);
  }

  // optional double real = 7;
  if (has_real()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->real(), target);
  }

  // repeated .ProtoBuf.Cell cell = 8;
  for (int i = 0; i < this->cell_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->cell(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Specimen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key());
    }

    // optional .ProtoBuf.Specimen.Status status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint64 weight = 3;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->weight());
    }

    // optional bool empty = 4 [default = true];
    if (has_empty()) {
      total_size += 1 + 1;
    }

    // optional uint64 natural = 5;
    if (has_natural()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->natural());
    }

    // optional sint64 integer = 6;
    if (has_integer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->integer());
    }

    // optional double real = 7;
    if (has_real()) {
      total_size += 1 + 8;
    }

  }
  // repeated .ProtoBuf.Cell cell = 8;
  total_size += 1 * this->cell_size();
  for (int i = 0; i < this->cell_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cell(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Specimen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Specimen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Specimen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Specimen::MergeFrom(const Specimen& from) {
  GOOGLE_CHECK_NE(&from, this);
  cell_.MergeFrom(from.cell_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_empty()) {
      set_empty(from.empty());
    }
    if (from.has_natural()) {
      set_natural(from.natural());
    }
    if (from.has_integer()) {
      set_integer(from.integer());
    }
    if (from.has_real()) {
      set_real(from.real());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Specimen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Specimen::CopyFrom(const Specimen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Specimen::IsInitialized() const {

  return true;
}

void Specimen::Swap(Specimen* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(status_, other->status_);
    std::swap(weight_, other->weight_);
    std::swap(empty_, other->empty_);
    std::swap(natural_, other->natural_);
    std::swap(integer_, other->integer_);
    std::swap(real_, other->real_);
    cell_.Swap(&other->cell_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Specimen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Specimen_descriptor_;
  metadata.reflection = Specimen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Cell::kNameFieldNumber;
const int Cell::kKeyFieldNumber;
const int Cell::kEmptyFieldNumber;
const int Cell::kNaturalFieldNumber;
const int Cell::kIntegerFieldNumber;
const int Cell::kRealFieldNumber;
const int Cell::kSpecialFieldNumber;
#endif  // !_MSC_VER

Cell::Cell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Cell::InitAsDefaultInstance() {
}

Cell::Cell(const Cell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Cell::SharedCtor() {
  _cached_size_ = 0;
  name_ = GOOGLE_ULONGLONG(0);
  key_ = GOOGLE_ULONGLONG(0);
  empty_ = true;
  natural_ = GOOGLE_ULONGLONG(0);
  integer_ = GOOGLE_LONGLONG(0);
  real_ = 0;
  special_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cell::~Cell() {
  SharedDtor();
}

void Cell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Cell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cell_descriptor_;
}

const Cell& Cell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yosokumo_2eproto();
  return *default_instance_;
}

Cell* Cell::default_instance_ = NULL;

Cell* Cell::New() const {
  return new Cell;
}

void Cell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    name_ = GOOGLE_ULONGLONG(0);
    key_ = GOOGLE_ULONGLONG(0);
    empty_ = true;
    natural_ = GOOGLE_ULONGLONG(0);
    integer_ = GOOGLE_LONGLONG(0);
    real_ = 0;
    special_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &name_)));
          set_has_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_key;
        break;
      }

      // optional uint64 key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_empty;
        break;
      }

      // optional bool empty = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_empty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &empty_)));
          set_has_empty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_natural;
        break;
      }

      // optional uint64 natural = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_natural:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &natural_)));
          set_has_natural();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_integer;
        break;
      }

      // optional sint64 integer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_integer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &integer_)));
          set_has_integer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_real;
        break;
      }

      // optional double real = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_real:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &real_)));
          set_has_real();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_special;
        break;
      }

      // optional uint64 special = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_special:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &special_)));
          set_has_special();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Cell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->name(), output);
  }

  // optional uint64 key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->key(), output);
  }

  // optional bool empty = 3 [default = true];
  if (has_empty()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->empty(), output);
  }

  // optional uint64 natural = 4;
  if (has_natural()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->natural(), output);
  }

  // optional sint64 integer = 5;
  if (has_integer()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->integer(), output);
  }

  // optional double real = 6;
  if (has_real()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->real(), output);
  }

  // optional uint64 special = 7;
  if (has_special()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->special(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Cell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 name = 1;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->name(), target);
  }

  // optional uint64 key = 2;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->key(), target);
  }

  // optional bool empty = 3 [default = true];
  if (has_empty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->empty(), target);
  }

  // optional uint64 natural = 4;
  if (has_natural()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->natural(), target);
  }

  // optional sint64 integer = 5;
  if (has_integer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->integer(), target);
  }

  // optional double real = 6;
  if (has_real()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->real(), target);
  }

  // optional uint64 special = 7;
  if (has_special()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->special(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Cell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->name());
    }

    // optional uint64 key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key());
    }

    // optional bool empty = 3 [default = true];
    if (has_empty()) {
      total_size += 1 + 1;
    }

    // optional uint64 natural = 4;
    if (has_natural()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->natural());
    }

    // optional sint64 integer = 5;
    if (has_integer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->integer());
    }

    // optional double real = 6;
    if (has_real()) {
      total_size += 1 + 8;
    }

    // optional uint64 special = 7;
    if (has_special()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->special());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cell::MergeFrom(const Cell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_empty()) {
      set_empty(from.empty());
    }
    if (from.has_natural()) {
      set_natural(from.natural());
    }
    if (from.has_integer()) {
      set_integer(from.integer());
    }
    if (from.has_real()) {
      set_real(from.real());
    }
    if (from.has_special()) {
      set_special(from.special());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cell::CopyFrom(const Cell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cell::IsInitialized() const {

  return true;
}

void Cell::Swap(Cell* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(key_, other->key_);
    std::swap(empty_, other->empty_);
    std::swap(natural_, other->natural_);
    std::swap(integer_, other->integer_);
    std::swap(real_, other->real_);
    std::swap(special_, other->special_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cell_descriptor_;
  metadata.reflection = Cell_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Message_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_Type_descriptor_;
}
bool Message_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Message_Type Message::Information;
const Message_Type Message::Error;
const Message_Type Message::Type_MIN;
const Message_Type Message::Type_MAX;
const int Message::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Message::kTypeFieldNumber;
const int Message::kTextFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Message::InitAsDefaultInstance() {
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  SharedDtor();
}

void Message::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yosokumo_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoBuf.Message.Type type = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoBuf::Message_Type_IsValid(value)) {
            set_type(static_cast< ::ProtoBuf::Message_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(101, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_text;
        break;
      }

      // optional string text = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ProtoBuf.Message.Type type = 101;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      101, this->type(), output);
  }

  // optional string text = 102;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      102, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ProtoBuf.Message.Type type = 101;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      101, this->type(), target);
  }

  // optional string text = 102;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ProtoBuf.Message.Type type = 101;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string text = 102;
    if (has_text()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {

  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf

// @@protoc_insertion_point(global_scope)
