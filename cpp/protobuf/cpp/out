class Message;
enum Message_Type {
  Message_Type_Information = 1,
  Message_Type_Error = 2
bool Message_Type_IsValid(int value);
const Message_Type Message_Type_Type_MIN = Message_Type_Information;
const Message_Type Message_Type_Type_MAX = Message_Type_Error;
const int Message_Type_Type_ARRAYSIZE = Message_Type_Type_MAX + 1;
const ::google::protobuf::EnumDescriptor* Message_Type_descriptor();
inline const ::std::string& Message_Type_Name(Message_Type value) {
    Message_Type_descriptor(), value);
inline bool Message_Type_Parse(
    const ::std::string& name, Message_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message_Type>(
    Message_Type_descriptor(), name, value);
class Catalog : public ::google::protobuf::Message {
  // implements Message ----------------------------------------------
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
class Study_Owner : public ::google::protobuf::Message {
  // implements Message ----------------------------------------------
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
class Study_Table : public ::google::protobuf::Message {
  // implements Message ----------------------------------------------
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
class Study_Model : public ::google::protobuf::Message {
  // implements Message ----------------------------------------------
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
class Study_Panel : public ::google::protobuf::Message {
  // implements Message ----------------------------------------------
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
class Study_Roster : public ::google::protobuf::Message {
  // implements Message ----------------------------------------------
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
class Study : public ::google::protobuf::Message {
  // implements Message ----------------------------------------------
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
class Roster : public ::google::protobuf::Message {
  // implements Message ----------------------------------------------
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
class Role_Roleholder : public ::google::protobuf::Message {
  // implements Message ----------------------------------------------
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
class Role_Privileges : public ::google::protobuf::Message {
  // implements Message ----------------------------------------------
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
class Role_Study : public ::google::protobuf::Message {
  // implements Message ----------------------------------------------
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
class Role : public ::google::protobuf::Message {
  // implements Message ----------------------------------------------
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
class Panel_StudyNameControl : public ::google::protobuf::Message {
  // implements Message ----------------------------------------------
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
class Panel_TypeControl : public ::google::protobuf::Message {
  // implements Message ----------------------------------------------
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
class Panel_StatusControl : public ::google::protobuf::Message {
  // implements Message ----------------------------------------------
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
class Panel_VisibilityControl : public ::google::protobuf::Message {
  // implements Message ----------------------------------------------
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
class Panel_BlockCountControl : public ::google::protobuf::Message {
  // implements Message ----------------------------------------------
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
class Panel_CellCountControl : public ::google::protobuf::Message {
  // implements Message ----------------------------------------------
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
class Panel_ProspectCountControl : public ::google::protobuf::Message {
  // implements Message ----------------------------------------------
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
class Panel_CreationTimeControl : public ::google::protobuf::Message {
  // implements Message ----------------------------------------------
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
class Panel_LatestBlockTimeControl : public ::google::protobuf::Message {
  // implements Message ----------------------------------------------
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
class Panel_LatestProspectTimeControl : public ::google::protobuf::Message {
  // implements Message ----------------------------------------------
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
class Panel : public ::google::protobuf::Message {
  // implements Message ----------------------------------------------
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
class Block : public ::google::protobuf::Message {
  // implements Message ----------------------------------------------
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
class Predictor : public ::google::protobuf::Message {
  // implements Message ----------------------------------------------
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
class Specimen : public ::google::protobuf::Message {
  // implements Message ----------------------------------------------
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
class Cell : public ::google::protobuf::Message {
  // implements Message ----------------------------------------------
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
class Message : public ::google::protobuf::Message {
  Message();
  virtual ~Message();
  Message(const Message& from);
  inline Message& operator=(const Message& from) {
  static const Message& default_instance();
  void Swap(Message* other);
  // implements Message ----------------------------------------------
  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  typedef Message_Type Type;
  static const Type Information = Message_Type_Information;
  static const Type Error = Message_Type_Error;
    return Message_Type_IsValid(value);
    Message_Type_Type_MIN;
    Message_Type_Type_MAX;
    Message_Type_Type_ARRAYSIZE;
    return Message_Type_descriptor();
    return Message_Type_Name(value);
    return Message_Type_Parse(name, value);
  // optional .yosokumo.core.Message.Type type = 101;
  inline ::yosokumo::core::Message_Type type() const;
  inline void set_type(::yosokumo::core::Message_Type value);
  // @@protoc_insertion_point(class_scope:yosokumo.core.Message)
  static Message* default_instance_;
// Message
// optional .yosokumo.core.Message.Type type = 101;
inline bool Message::has_type() const {
inline void Message::set_has_type() {
inline void Message::clear_has_type() {
inline void Message::clear_type() {
inline ::yosokumo::core::Message_Type Message::type() const {
  return static_cast< ::yosokumo::core::Message_Type >(type_);
inline void Message::set_type(::yosokumo::core::Message_Type value) {
  assert(::yosokumo::core::Message_Type_IsValid(value));
inline bool Message::has_text() const {
inline void Message::set_has_text() {
inline void Message::clear_has_text() {
inline void Message::clear_text() {
inline const ::std::string& Message::text() const {
inline void Message::set_text(const ::std::string& value) {
inline void Message::set_text(const char* value) {
inline void Message::set_text(const char* value, size_t size) {
inline ::std::string* Message::mutable_text() {
inline ::std::string* Message::release_text() {
inline void Message::set_allocated_text(::std::string* text) {
inline const EnumDescriptor* GetEnumDescriptor< ::yosokumo::core::Message_Type>() {
  return ::yosokumo::core::Message_Type_descriptor();
